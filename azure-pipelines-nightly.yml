trigger:
  - none

pr: 
  - none

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

schedules:
- cron: "0 1 * * *"
  displayName: Nightly
  branches:
    include:
    - master
  always: true
#- cron: "0 2 1 * *"
#  displayName: Monthly
#  branches:
#    include:
#    - master
#  always: true

parameters:
  - name: envs
    displayName: Environments
    type: object
    values: []
    default: ['sbox','dev','test','stg','prod']

stages:
  - stage: 'GetDependencies'
    displayName: 'Get Dependency Details'
    dependsOn: []
    variables:
      - template: pipeline/variables/shared.yaml
      - group: HMI-APIM-Common
    jobs:
      - job: GetScheduleName
        displayName: 'Get Schedule Name'
        steps: 
          - download: none
          - checkout: none
          - template: templates\common\pipeline-details.yml@azTemplates
            parameters:
              buildId: $(Build.BuildId)
              patToken: $(pipelinePAT)
              propertyName: ".triggerInfo.scheduleName"
              variableName: "scheduleName"
              taskName: 'buildDetail'

  - template: pipelines/stages/validate.yaml
    parameters:
      dependsOn: GetDependencies
      condition: eq(dependencies.GetDependencies.outputs['GetScheduleName.buildDetail.scheduleName'], 'Nightly' )

  - ${{each environment in parameters.envs}}:
    - template: pipeline/stages/plan.yaml
      parameters:
        environment: ${{ environment }}
        subscription: DTS-SHAREDSERVICES-${{ upper(environment) }}
        dependsOn: Validate
 
    - stage: 'Validate${{ environment }}'
      displayName: 'Validate ${{ environment }}'
      dependsOn: 'Plan${{ environment }}'
      variables:
        - template: pipeline/variables/shared.yaml
        - template: pipeline/variables/${{ environment }}.yaml
        - group: HMI-APIM-Common
        - group: HMI-APIM-BUILD-${{ upper(environment) }}
      jobs:
        - job: ValidateChanges${{ environment }}
          displayName: '${{ environment }} Terraform changes'
          steps: 
            - download: current
              artifact: 'tfplan-${{ environment }}.tfplan'
              displayName: 'Download ${{ environment }} Plan file'

            - template: pipeline/steps/tf-show.yml
              parameters: 
                planOrStateFilePath: "$(Pipeline.Workspace)/tfplan-${{ environment }}.tfplan/tfplan-${{ environment }}.tfplan"
                outputLocation: "$(Pipeline.Workspace)/${{ environment }}.json"
                subscriptionName: ${{variables.subscriptionName}}
                env: ${{variables.env}}
                location: ${{variables.location}}
                locationEng: ${{variables.locationEng}}
                product: ${{variables.product}}

            - task: PowerShell@2
              name: 'terraChanges'
              displayName: 'Validate any changes'
              inputs:
                targetType: 'inline'
                script: |
                  $environment = "${{ environment }}"
                  $planObj = Get-Content "$(Pipeline.Workspace)/${{ environment }}.json" | ConvertFrom-Json
                  $resourceChanges = $planObj.resource_changes

                  $addChanges = ($resourceChanges | Where {$_.change.actions -contains "create"}).length
                  $changeChanges = ($resourceChanges | Where {$_.change.actions -contains "update"}).length
                  $removeChanges = ($resourceChanges | Where {$_.change.actions -contains "delete"}).length
                  $totalChanges = $addChanges + $changeChanges + $removeChanges

                  $msg = "There are $totalChanges ($addChanges to add, $changeChanges to change, $removeChanges to remove) in the $environment Environment on HMI"
                  Write-Host $msg

                  $sendMsg = (&{If($addChanges -gt 0 -or $changeChanges -gt 0 -or $removeChanges -gt 0) {"true"} Else {"false"}})
                  Write-Host "Should send message: $sendMsg"

                  Write-Host "##vso[task.setvariable variable=sendMsg;isOutput=true]$sendMsg"
                  Write-Host "##vso[task.setvariable variable=msg;isOutput=true]$msg"
            
            - template: pipeline/steps/send-im.yml
              parameters:
                logicAppUrl: $(logic_app_url)
                title: "Terraform Changes in ${{ environment }}"
                message: "$(terraChanges.msg)"
                conditionAction: $(terraChanges.sendMsg)


