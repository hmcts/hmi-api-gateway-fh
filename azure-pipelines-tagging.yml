--- 
parameters: 
  - 
    default: ALL
    displayName: "Stage to Run"
    name: stage
    type: string
    values: 
      - SBOX
      - DEV
      - TEST
      - STG
      - PROD
      - NONPROD
      - PRODUCTION
      - ALL
  - 
    default: 
      - 
        group: HMI-APIM-BUILD-SBOX
        name: sbox
        subscription: DTS-SHAREDSERVICES-SBOX
      - 
        group: HMI-APIM-BUILD-DEV
        name: dev
        subscription: DTS-SHAREDSERVICES-DEV
      - 
        group: HMI-APIM-BUILD-TEST
        name: test
        subscription: DTS-SHAREDSERVICES-TEST
      - 
        group: HMI-APIM-BUILD-STG
        name: stg
        subscription: DTS-SHAREDSERVICES-STG
      - 
        group: HMI-APIM-BUILD-PROD
        name: prod
        subscription: DTS-SHAREDSERVICES-PROD
    name: environments
    type: object
stages: 
  - 
    jobs: 
      - 
        ? "${{ each environment in parameters.environments }}"
        : 
          - 
            parameters: 
              displayName: "Validate ${{ environment.name }}"
              environment: "${{ environment.name }}"
              group: "${{ environment.group }}"
              subscription: "${{ environment.subscription }}"
            template: pipeline/jobs/terraform-validate.yaml
    stage: Validate
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'SBOX'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: Validate
    jobs: 
      - 
        parameters: 
          displayName: "Plan SBOX"
          group: HMI-APIM-BUILD-SBOX
          subscription: DTS-SHAREDSERVICES-SBOX
        template: pipeline/jobs/terraform-plan.yaml
    stage: PlanSBOX
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'DEV'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: Validate
    jobs: 
      - 
        parameters: 
          displayName: "Plan DEV"
          group: HMI-APIM-BUILD-DEV
          subscription: DTS-SHAREDSERVICES-DEV
        template: pipeline/jobs/terraform-plan.yaml
    stage: PlanDEV
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'TEST'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: Validate
    jobs: 
      - 
        parameters: 
          displayName: "Plan TEST"
          group: HMI-APIM-BUILD-TEST
          subscription: DTS-SHAREDSERVICES-TEST
        template: pipeline/jobs/terraform-plan.yaml
    stage: PlanTEST
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'STG'), contains('${{ parameters.stage }}', 'PRODUCTION'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: Validate
    jobs: 
      - 
        parameters: 
          displayName: "Plan STG"
          group: HMI-APIM-BUILD-STG
          subscription: DTS-SHAREDSERVICES-STG
        template: pipeline/jobs/terraform-plan.yaml
    stage: PlanSTG
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'PROD'), contains('${{ parameters.stage }}', 'PRODUCTION'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: Validate
    jobs: 
      - 
        parameters: 
          displayName: "Plan PROD"
          group: HMI-APIM-BUILD-PROD
          subscription: DTS-SHAREDSERVICES-PROD
        template: pipeline/jobs/terraform-plan.yaml
    stage: PlanPROD
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'SBOX'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: PlanSbox
    jobs: 
      - 
        parameters: 
          displayName: "Build SBOX"
          subscription: DTS-SHAREDSERVICES-SBOX
        template: pipeline/jobs/terraform-apply.yaml
      - 
        parameters: 
          dependsOn: 
            - TerraformApply
            - ApplyHostName
          displayName: "Apply API Policies"
          environment: sbox
          subscription: DTS-SHAREDSERVICES-SBOX
        template: pipeline/jobs/apply-policies.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Remove default APIS"
          subscription: DTS-SHAREDSERVICES-SBOX
        template: pipeline/jobs/remove-default-apis.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Apply Custom Domain Configuration"
        template: pipeline/jobs/apply-hostname.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Create ROTA Storage"
          environmentName: sandbox
          subscription: DTS-SHAREDSERVICES-SBOX
        template: pipeline/jobs/create-storage-rota.yaml
      - 
        parameters: 
          dependsOn: createRotaStorage
          displayName: "Create DTU Logic Application"
          environment: sbox
          subscription: DTS-SHAREDSERVICES-SBOX
        template: pipeline/jobs/create-logicapp-dtu.yaml
    stage: BuildSBOX
    variables: 
      - 
        group: HMI-APIM-BUILD-SBOX
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'DEV'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: PlanDev
    jobs: 
      - 
        parameters: 
          displayName: "Build DEV"
          subscription: DTS-SHAREDSERVICES-DEV
        template: pipeline/jobs/terraform-apply.yaml
      - 
        parameters: 
          dependsOn: 
            - TerraformApply
            - ApplyHostName
          displayName: "Apply API Policies"
          environment: dev
          subscription: DTS-SHAREDSERVICES-DEV
        template: pipeline/jobs/apply-policies.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Remove default APIS"
          subscription: DTS-SHAREDSERVICES-DEV
        template: pipeline/jobs/remove-default-apis.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Apply Custom Domain Configuration"
        template: pipeline/jobs/apply-hostname.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Create ROTA Storage"
          environmentName: development
          subscription: DTS-SHAREDSERVICES-DEV
        template: pipeline/jobs/create-storage-rota.yaml
      - 
        parameters: 
          dependsOn: createRotaStorage
          displayName: "Create DTU Logic Application"
          environment: dev
          subscription: DTS-SHAREDSERVICES-DEV
        template: pipeline/jobs/create-logicapp-dtu.yaml
    stage: BuildDEV
    variables: 
      - 
        group: HMI-APIM-BUILD-DEV
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'TEST'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: PlanTest
    jobs: 
      - 
        parameters: 
          displayName: "Build TEST"
          subscription: DTS-SHAREDSERVICES-TEST
        template: pipeline/jobs/terraform-apply.yaml
      - 
        parameters: 
          dependsOn: 
            - TerraformApply
            - ApplyHostName
          displayName: "Apply API Policies"
          environment: test
          subscription: DTS-SHAREDSERVICES-TEST
        template: pipeline/jobs/apply-policies.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Remove default APIS"
          subscription: DTS-SHAREDSERVICES-TEST
        template: pipeline/jobs/remove-default-apis.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Apply Custom Domain Configuration"
        template: pipeline/jobs/apply-hostname.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Create ROTA Storage"
          environmentName: test
          subscription: DTS-SHAREDSERVICES-TEST
        template: pipeline/jobs/create-storage-rota.yaml
      - 
        parameters: 
          dependsOn: createRotaStorage
          displayName: "Create DTU Logic Application"
          environment: test
          subscription: DTS-SHAREDSERVICES-TEST
        template: pipeline/jobs/create-logicapp-dtu.yaml
    stage: BuildTEST
    variables: 
      - 
        group: HMI-APIM-BUILD-TEST
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'SBOX'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: BuildSbox
    jobs: 
      - 
        parameters: 
          displayName: "Create Storage for Test Results"
          subscription: DTS-SHAREDSERVICES-SBOX
        template: pipeline/jobs/create-storage.yaml
      - 
        parameters: 
          displayName: "Read APIM Subscription Key"
          subscription: DTS-SHAREDSERVICES-SBOX
        template: pipeline/jobs/export-keyvault.yaml
      - 
        parameters: 
          dependsOn: 
            - CreateStorage
            - ExportKeyVault
          displayName: "Unit Test"
          storageContainer: $(storageContainer)
          subscription: DTS-SHAREDSERVICES-SBOX
          subscriptionKey: $(subscriptionKey)
          variables: 
            storageContainer: "$[dependencies.CreateStorage.outputs['createContainer.container']]"
            subscriptionKey: "$[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]"
        template: pipeline/jobs/test-unit.yaml
      - 
        parameters: 
          dependsOn: 
            - CreateStorage
            - ExportKeyVault
          displayName: "Acceptance Test"
          storageContainer: $(storageContainer)
          subscription: DTS-SHAREDSERVICES-SBOX
          subscriptionKey: $(subscriptionKey)
          variables: 
            storageContainer: "$[dependencies.CreateStorage.outputs['createContainer.container']]"
            subscriptionKey: "$[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]"
        template: pipeline/jobs/test-acceptance.yaml
      - 
        parameters: 
          dependsOn: 
            - AcceptanceTest
          displayName: "Code Quality Test"
        template: pipeline/jobs/test-codequality.yaml
    pool: 
      vmImage: ubuntu-18.04
    stage: TestSBOX
    variables: 
      - 
        group: HMI-APIM-BUILD-SBOX
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'DEV'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: BuildDev
    jobs: 
      - 
        parameters: 
          displayName: "Create Storage for Test Results"
          subscription: DTS-SHAREDSERVICES-DEV
        template: pipeline/jobs/create-storage.yaml
      - 
        parameters: 
          displayName: "Read APIM Subscription Key"
          subscription: DTS-SHAREDSERVICES-DEV
        template: pipeline/jobs/export-keyvault.yaml
      - 
        parameters: 
          dependsOn: 
            - CreateStorage
            - ExportKeyVault
          displayName: "Unit Test"
          storageContainer: $(storageContainer)
          subscription: DTS-SHAREDSERVICES-DEV
          subscriptionKey: $(subscriptionKey)
          variables: 
            storageContainer: "$[dependencies.CreateStorage.outputs['createContainer.container']]"
            subscriptionKey: "$[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]"
        template: pipeline/jobs/test-unit.yaml
      - 
        parameters: 
          dependsOn: 
            - CreateStorage
            - ExportKeyVault
          displayName: "Acceptance Test"
          storageContainer: $(storageContainer)
          subscription: DTS-SHAREDSERVICES-DEV
          subscriptionKey: $(subscriptionKey)
          variables: 
            storageContainer: "$[dependencies.CreateStorage.outputs['createContainer.container']]"
            subscriptionKey: "$[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]"
        template: pipeline/jobs/test-acceptance.yaml
    pool: 
      vmImage: ubuntu-18.04
    stage: TestDEV
    variables: 
      - 
        group: HMI-APIM-BUILD-DEV
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'TEST'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: BuildTest
    jobs: 
      - 
        parameters: 
          displayName: "Create Storage for Test Results"
          subscription: DTS-SHAREDSERVICES-TEST
        template: pipeline/jobs/create-storage.yaml
      - 
        parameters: 
          displayName: "Read APIM Subscription Key"
          subscription: DTS-SHAREDSERVICES-TEST
        template: pipeline/jobs/export-keyvault.yaml
      - 
        parameters: 
          dependsOn: 
            - CreateStorage
            - ExportKeyVault
          displayName: "Unit Test"
          storageContainer: $(storageContainer)
          subscription: DTS-SHAREDSERVICES-TEST
          subscriptionKey: $(subscriptionKey)
          variables: 
            storageContainer: "$[dependencies.CreateStorage.outputs['createContainer.container']]"
            subscriptionKey: "$[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]"
        template: pipeline/jobs/test-unit.yaml
      - 
        parameters: 
          dependsOn: 
            - CreateStorage
            - ExportKeyVault
          displayName: "Acceptance Test"
          storageContainer: $(storageContainer)
          subscription: DTS-SHAREDSERVICES-TEST
          subscriptionKey: $(subscriptionKey)
          variables: 
            storageContainer: "$[dependencies.CreateStorage.outputs['createContainer.container']]"
            subscriptionKey: "$[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]"
        template: pipeline/jobs/test-acceptance.yaml
      - 
        parameters: 
          dependsOn: 
            - CreateStorage
            - ExportKeyVault
          displayName: "Smoke Test"
          storageContainer: $(storageContainer)
          subscription: DTS-SHAREDSERVICES-TEST
          subscriptionKey: $(subscriptionKey)
          variables: 
            storageContainer: "$[dependencies.CreateStorage.outputs['createContainer.container']]"
            subscriptionKey: "$[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]"
        template: pipeline/jobs/test-smoke.yaml
      - 
        parameters: 
          dependsOn: 
            - CreateStorage
            - ExportKeyVault
          displayName: "Functional Test"
          storageContainer: $(storageContainer)
          subscription: DTS-SHAREDSERVICES-TEST
          subscriptionKey: $(subscriptionKey)
          variables: 
            storageContainer: "$[dependencies.CreateStorage.outputs['createContainer.container']]"
            subscriptionKey: "$[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]"
        template: pipeline/jobs/test-functional.yaml
      - 
        parameters: 
          dependsOn: 
            - AcceptanceTest
          displayName: "Code Quality Test"
        template: pipeline/jobs/test-codequality.yaml
    pool: 
      vmImage: ubuntu-18.04
    stage: TestTEST
    variables: 
      - 
        group: HMI-APIM-BUILD-TEST
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'STG'), contains('${{ parameters.stage }}', 'PRODUCTION'), contains('${{ parameters.stage }}', 'ALL'), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: 
      - PlanStg
    jobs: 
      - 
        parameters: 
          displayName: "Build STG"
          subscription: DTS-SHAREDSERVICES-STG
        template: pipeline/jobs/terraform-apply.yaml
      - 
        parameters: 
          dependsOn: 
            - TerraformApply
            - ApplyHostName
          displayName: "Apply API Policies"
          environment: stg
          subscription: DTS-SHAREDSERVICES-STG
        template: pipeline/jobs/apply-policies.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Remove default APIS"
          subscription: DTS-SHAREDSERVICES-STG
        template: pipeline/jobs/remove-default-apis.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Apply Custom Domain Configuration"
        template: pipeline/jobs/apply-hostname.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Create ROTA Storage"
          environmentName: staging
          subscription: DTS-SHAREDSERVICES-STG
        template: pipeline/jobs/create-storage-rota.yaml
      - 
        parameters: 
          dependsOn: createRotaStorage
          displayName: "Create DTU Logic Application"
          environment: stg
          subscription: DTS-SHAREDSERVICES-STG
        template: pipeline/jobs/create-logicapp-dtu.yaml
    stage: BuildSTG
    variables: 
      - 
        group: HMI-APIM-BUILD-STG
  - 
    condition: "and(succeeded(), or(eq('${{ parameters.stage }}', 'PROD'), contains('${{ parameters.stage }}', 'PRODUCTION'), contains('${{ parameters.stage }}', 'ALL')), eq(variables['Build.SourceBranch'], 'refs/tags/')))"
    dependsOn: 
      - PlanProd
    jobs: 
      - 
        parameters: 
          displayName: "Build PROD"
          subscription: DTS-SHAREDSERVICES-PROD
        template: pipeline/jobs/terraform-apply.yaml
      - 
        parameters: 
          dependsOn: 
            - TerraformApply
            - ApplyHostName
          displayName: "Apply API Policies"
          environment: prod
          subscription: DTS-SHAREDSERVICES-PROD
        template: pipeline/jobs/apply-policies.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Remove default APIS"
          subscription: DTS-SHAREDSERVICES-PROD
        template: pipeline/jobs/remove-default-apis.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Apply Custom Domain Configuration"
        template: pipeline/jobs/apply-hostname.yaml
      - 
        parameters: 
          dependsOn: TerraformApply
          displayName: "Create ROTA Storage"
          environmentName: production
          subscription: DTS-SHAREDSERVICES-PROD
        template: pipeline/jobs/create-storage-rota.yaml
      - 
        parameters: 
          dependsOn: createRotaStorage
          displayName: "Create DTU Logic Application"
          environment: prod
          subscription: DTS-SHAREDSERVICES-PROD
        template: pipeline/jobs/create-logicapp-dtu.yaml
    stage: BuildPROD
    variables: 
      - 
        group: HMI-APIM-BUILD-PROD
trigger: 
  - none
variables: 
  - 
    group: HMI-APIM-Common
