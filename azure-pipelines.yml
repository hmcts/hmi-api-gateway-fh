---
trigger:
  - master

parameters:
  - name: environments
    type: object
    default: 
    - name: sbox
      subscription: DTS-SHAREDSERVICES-SBOX
      group: HMI-APIM-BUILD-SBOX
      tests_gradle:
      - name: UnitTest 
        command: clean test
      - name: SmokeTest
        command: clean smoke
        dependsOn: UnitTest
      - name: FunctionalTest
        command: clean functional
        dependsOn: SmokeTest

    - name: test
      subscription: DTS-SHAREDSERVICES-TEST
      group: HMI-APIM-BUILD-TEST
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      tests_gradle:
      - name: UnitTest 
        command: clean test
      - name: SmokeTest
        command: clean smoke
        dependsOn: UnitTest
      - name: FunctionalTest
        command: clean functional
        dependsOn: SmokeTest

variables:
  - group: HMI-APIM-Common

stages:

  - stage: TEST
    displayName: Create ACR Images
    jobs:
      - job: BuildACRimage
        pool:
          vmImage: 'ubuntu-latest'

        steps:
        - template: pipeline/steps/push-img.yaml
          parameters:
            registry: 'DTS-SS-ACRPrivate'
            repository: 'hmi/apim-tests-owasp'
            dockerfile: 'pipeline/tests/owasp/Dockerfile'
            tags: |
              v0.1


  - stage: OWASP
    displayName: Tests - OWASP
    jobs:
      - job: containerjob
        pool:
          vmImage: 'ubuntu-latest'
        # container: owasp_zap_container
        steps:

        - task: Docker@2
          displayName: Login to ACR
          inputs:
            command: login
            containerRegistry: ${{ parameters.registry }}
        - script: |
            docker run -e TEST_URL=https://www.example.com/openapi.json -e SecurityRules=https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf -v /home/vsts/work/1:/zap/wrk:rw ssprivateprod.azurecr.io/hmi/apim-tests-owasp:v0.1 /bin/bash -c ./security.sh
            ls /home/vsts/work/1
        - task: Docker@2
          displayName: Logout of ACR
          inputs:
            command: logout
            containerRegistry: ${{ parameters.registry }}