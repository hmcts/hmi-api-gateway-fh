trigger:
  - master
pr:
  - none

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

parameters:

  - name: release
    displayName: "Release To"
    type: string
    default: pull-request
    values:
    - pull-request
    - sbox
    - dev
    - test
    - release

  - name: environments
    type: object
    default:
    - name: sbox
      subscription: DTS-SHAREDSERVICES-SBOX
      group: HMI-APIM-BUILD-SBOX

    - name: dev
      subscription: DTS-SHAREDSERVICES-DEV
      group: HMI-APIM-BUILD-DEV

    - name: test
      subscription: DTS-SHAREDSERVICES-TEST
      group: HMI-APIM-BUILD-TEST

    - name: stg
      subscription: DTS-SHAREDSERVICES-STG
      group: HMI-APIM-BUILD-STG

variables:
  - group: HMI-APIM-Common

stages:
  - stage: Validate
    jobs:
    - ${{ each environment in parameters.environments }}:
      - template: pipeline/jobs/terraform-validate.yaml
        parameters:
          displayName: Validate ${{ environment.name }}
          subscription: ${{ environment.subscription }} 
          group: ${{ environment.group }}
          environment: ${{ environment.name }}

  - stage: PlanSBOX
    dependsOn: Validate
    condition: and(succeeded(), or(eq('${{ parameters.stage }}', 'SBOX'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL')))
    jobs:
    - template: pipeline/jobs/terraform-plan.yaml
      parameters:
        displayName: Plan SBOX
        subscription: DTS-SHAREDSERVICES-SBOX
        group: HMI-APIM-BUILD-SBOX

  - stage: PlanDEV
    dependsOn: Validate
    condition: and(succeeded(), or(eq('${{ parameters.stage }}', 'DEV'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL')))
    jobs:
    - template: pipeline/jobs/terraform-plan.yaml
      parameters:
        displayName: Plan DEV
        subscription: DTS-SHAREDSERVICES-DEV
        group: HMI-APIM-BUILD-DEV

  - stage: PlanTEST
    dependsOn: Validate
    condition: and(succeeded(), or(eq('${{ parameters.stage }}', 'TEST'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL')))
    jobs:
    - template: pipeline/jobs/terraform-plan.yaml
      parameters:
        displayName: Plan TEST
        subscription: DTS-SHAREDSERVICES-TEST
        group: HMI-APIM-BUILD-TEST

  - stage: PlanSTG
    dependsOn: Validate
    condition: and(succeeded(), or(eq('${{ parameters.stage }}', 'STG'), contains('${{ parameters.stage }}', 'ALL')))
    jobs:
    - template: pipeline/jobs/terraform-plan.yaml
      parameters:
        displayName: Plan STG
        subscription: DTS-SHAREDSERVICES-STG
        group: HMI-APIM-BUILD-STG

  - stage: BuildSBOX
    dependsOn: PlanSbox
    condition: and(succeeded(), or(eq('${{ parameters.stage }}', 'SBOX'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL')))
    variables:
      - group: HMI-APIM-BUILD-SBOX
    jobs:
    - template: pipeline/jobs/terraform-apply.yaml
      parameters:
        displayName: Build SBOX
        subscription: DTS-SHAREDSERVICES-SBOX
    - template: pipeline/jobs/apply-policies.yaml
      parameters:
        displayName: Apply API Policies
        subscription: DTS-SHAREDSERVICES-SBOX
        environment: sbox
        dependsOn: 
        - TerraformApply
    - template: pipeline/jobs/remove-default-apis.yaml
      parameters:
        displayName: Remove default APIS
        subscription: DTS-SHAREDSERVICES-SBOX
        dependsOn: TerraformApply
    - template: pipeline/jobs/create-storage-rota.yaml
      parameters:
        displayName: Create ROTA Storage
        subscription: DTS-SHAREDSERVICES-SBOX
        dependsOn: TerraformApply
        environmentName: sandbox
    - template: pipeline/jobs/create-logicapp-dtu.yaml
      parameters:
        displayName: Create DTU Logic Application
        subscription: DTS-SHAREDSERVICES-SBOX
        environment: sbox
        dependsOn: createRotaStorage

  - stage: BuildDEV
    dependsOn: PlanDev
    condition: and(succeeded(), or(eq('${{ parameters.stage }}', 'DEV'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL')))
    variables:
      - group: HMI-APIM-BUILD-DEV
    jobs:
    - template: pipeline/jobs/terraform-apply.yaml
      parameters:
        displayName: Build DEV
        subscription: DTS-SHAREDSERVICES-DEV
    - template: pipeline/jobs/apply-policies.yaml
      parameters:
        displayName: Apply API Policies
        subscription: DTS-SHAREDSERVICES-DEV
        environment: dev
        dependsOn: 
        - TerraformApply
    - template: pipeline/jobs/remove-default-apis.yaml
      parameters:
        displayName: Remove default APIS
        subscription: DTS-SHAREDSERVICES-DEV
        dependsOn: TerraformApply
    - template: pipeline/jobs/create-storage-rota.yaml
      parameters:
        displayName: Create ROTA Storage
        subscription: DTS-SHAREDSERVICES-DEV
        dependsOn: TerraformApply
        environmentName: development
    - template: pipeline/jobs/create-logicapp-dtu.yaml
      parameters:
        displayName: Create DTU Logic Application
        subscription: DTS-SHAREDSERVICES-DEV
        environment: dev
        dependsOn: createRotaStorage

  - stage: BuildTEST
    dependsOn: PlanTest
    condition: and(succeeded(), or(eq('${{ parameters.stage }}', 'TEST'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL')))
    variables:
      - group: HMI-APIM-BUILD-TEST
    jobs:
    - template: pipeline/jobs/terraform-apply.yaml
      parameters:
        displayName: Build TEST
        subscription: DTS-SHAREDSERVICES-TEST
    - template: pipeline/jobs/apply-policies.yaml
      parameters:
        displayName: Apply API Policies
        subscription: DTS-SHAREDSERVICES-TEST
        environment: test
        dependsOn:
        - TerraformApply
    - template: pipeline/jobs/remove-default-apis.yaml
      parameters:
        displayName: Remove default APIS
        subscription: DTS-SHAREDSERVICES-TEST
        dependsOn: TerraformApply
    - template: pipeline/jobs/create-storage-rota.yaml
      parameters:
        displayName: Create ROTA Storage
        subscription: DTS-SHAREDSERVICES-TEST
        dependsOn: TerraformApply
        environmentName: test
    - template: pipeline/jobs/create-logicapp-dtu.yaml
      parameters:
        displayName: Create DTU Logic Application
        subscription: DTS-SHAREDSERVICES-TEST
        environment: test
        dependsOn: createRotaStorage

  - stage: TestSBOX
    dependsOn: BuildSbox
    condition: and(succeeded(), or(eq('${{ parameters.stage }}', 'SBOX'), contains('${{ parameters.stage }}', 'NONPROD'), contains('${{ parameters.stage }}', 'ALL')))
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
      - group: HMI-APIM-BUILD-SBOX
    jobs:
      - template: pipeline/jobs/create-storage.yaml
        parameters:
          displayName: Create Storage for Test Results
          subscription: DTS-SHAREDSERVICES-SBOX
      
      - template: pipeline/jobs/export-keyvault.yaml
        parameters:
          displayName: Read APIM Subscription Key
          subscription: DTS-SHAREDSERVICES-SBOX

  - ${{ each environment in parameters.environments }}:
    - ${{ if or(and(eq(environment, 'sbox'), eq(parameters.release, 'sbox')),and(eq(environment, 'dev'), eq(parameters.release, 'dev')),and(eq(environment, 'test'), eq(parameters.release, 'test')),and(or(eq(environment, 'stg'),eq(environment, 'prod')), eq(parameters.release, 'release'))) }}:
      - ${{ if or(and(ne(environment, 'stg'), ne(environment, 'prod'), ne(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), True)), and(or(eq(environment, 'stg'), eq(environment, 'prod')), startsWith(variables['Build.SourceBranch'], 'refs/tags/')) ) }}:
        - template: pipeline/stages/plan.yaml
          parameters:
            environment: ${{ environment }}
            subscription: DTS-SHAREDSERVICES-${{ upper(environment) }}

        - ${{ if eq(environment, 'prod') }}:
          - template: pipeline/stages/wait.yaml
            parameters:
              environment: ${{ environment }}

        - template: pipeline/stages/apply.yaml
          parameters:
            environment: ${{ environment }}
            subscription: DTS-SHAREDSERVICES-${{ upper(environment) }}
        
        - ${{ if ne(environment, 'prod' )}}:
          - template: pipeline/stages/test.yaml
            parameters:
              environment: ${{ environment }}
              subscription: DTS-SHAREDSERVICES-${{ upper(environment) }}
        
