---
trigger:
  - master

parameters:
  - name: environments
    type: object
    default: 
    - name: sbox
      subscription: DTS-SHAREDSERVICES-SBOX
      group: HMI-APIM-BUILD-SBOX
      tests_gradle:
      - name: UnitTest 
        command: clean test
      - name: SmokeTest
        command: clean smoke
        dependsOn: UnitTest
      - name: FunctionalTest
        command: clean functional
        dependsOn: SmokeTest

    - name: test
      subscription: DTS-SHAREDSERVICES-TEST
      group: HMI-APIM-BUILD-TEST
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      tests_gradle:
      - name: UnitTest 
        command: clean test
      - name: SmokeTest
        command: clean smoke
        dependsOn: UnitTest
      - name: FunctionalTest
        command: clean functional
        dependsOn: SmokeTest

variables:
  - group: HMI-APIM-Common
  - group: HMI-APIM-BUILD-SBOX

stages:

  # - stage: TEST
  #   displayName: Create ACR Images
  #   jobs:
  #     - job: BuildACRimage
  #       pool:
  #         vmImage: 'ubuntu-latest'

  #       steps:
  #       - template: pipeline/steps/push-img.yaml
  #         parameters:
  #           registry: 'DTS-SS-ACRPrivate'
  #           repository: 'hmi/apim-tests-owasp'
  #           dockerfile: 'pipeline/tests/owasp/Dockerfile'
  #           tags: |
  #             v0.1


  - stage: OWASP
    displayName: Tests - OWASP
    jobs:
      - job: createStorage
        pool:
          vmImage: 'windows-latest'

        steps:
        - task: AzureCLI@2
          displayName: createContainer
          name: createContainer
          inputs:
            azureSubscription: 'DTS-SHAREDSERVICES-SBOX'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              echo "Obtaining container key..."
              key=$(az storage account keys list -g hmi-apim-sbox-rg --account-name hmiapimsboxsa --query "[0].value" -o tsv)
              echo "Creating storage container"
              container="apizapscan-"$(date +"%m-%d-%y")
              az storage container create --name $container --account-name hmiapimsboxsa --account-key $key
              echo "##vso[task.setvariable variable=storagekey;isOutput=true]$key"
              echo "##vso[task.setvariable variable=container;isOutput=true]$container"
              echo $storagekey
              echo $container

      - job: apizapscan
        dependsOn:
        - createStorage
        variables:
          storagekey: $[dependencies.createStorage.outputs['createContainer.storagekey']]
          container: $[dependencies.createStorage.outputs['createContainer.container']]
        pool:
          vmImage: 'ubuntu-latest'

        steps:
        - script: |
            echo $storagekey
            echo $container
        # - task: Docker@1
        #   displayName: 'Run an image'
        #   inputs:
        #     azureSubscriptionEndpoint: 'DTS-SHAREDSERVICES-SBOX'
        #     azureContainerRegistry: ssprivatesbox.azurecr.io
        #     command: 'Run an image'
        #     imageName: 'ssprivatesbox.azurecr.io/hmi/apim-tests-owasp:v0.1'
        #     volumes: '/home/vsts/work/:/zap/wrk/:rw'
        #     envVars: |         
        #       TEST_URL=https://www.example.com/openapi.json
        #       SecurityRules=https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf
        #     containerCommand: '/bin/bash ./security.sh'
        #     runInBackground: false


        # - script: |
        #     cd /home/vsts/work/

        #     echo "Uploading ZAP report..."
        #     az storage blob upload --account-name hmiapimsboxsa --account-key $(storagekey) --container-name $(container) -f api-report.html -n api-report.html
        #     az storage blob upload --account-name hmiapimsboxsa --account-key $(storagekey) --container-name $(container) -f report.json -n report.json
        #     az storage blob upload --account-name hmiapimsboxsa --account-key $(storagekey) --container-name $(container) -f zap.out -n zap.out
