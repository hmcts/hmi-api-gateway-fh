---
trigger:
  - master

parameters:
  - name: environments
    type: object
    default: 
    - name: sbox
      subscription: DTS-SHAREDSERVICES-SBOX
      group: HMI-APIM-BUILD-SBOX
      registry: DTS-SS-PRIVATE-SBOX
      tests_gradle:
      - name: UnitTest
        command: test
        serenity: true
      - name: SmokeTest
        command: smoke
        serenity: false
        dependsOn: UnitTest
      - name: FunctionalTest
        command: functional
        serenity: true
        dependsOn: SmokeTest
      tests_security:
      - name: ApiZapScan
        repository: hmi/apim-tests-owasp

    - name: dev
      subscription: DTS-SHAREDSERVICES-DEV
      group: HMI-APIM-BUILD-DEV
      tests_gradle:
      - name: UnitTest
        command: test
        serenity: true
      - name: SmokeTest
        command: smoke
        serenity: false
        dependsOn: UnitTest
      - name: FunctionalTest
        command: functional
        serenity: true
        dependsOn: SmokeTest

    - name: test
      subscription: DTS-SHAREDSERVICES-TEST
      group: HMI-APIM-BUILD-TEST
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      tests_gradle:
      - name: UnitTest
        command: test
        serenity: true
      - name: SmokeTest
        command: smoke
        serenity: false
        dependsOn: UnitTest
      - name: FunctionalTest
        command: functional
        serenity: true
        dependsOn: SmokeTest

variables:
  - group: HMI-APIM-Common

stages:

- ${{ each environment in parameters.environments }}:

  - stage: ${{ environment.name }}
    ${{ if environment.condition }}:
      condition: ${{ environment.condition }}
    displayName: Build and Test ${{ environment.name }} APIM
    
    jobs:

    - template: pipeline/jobs/terraform.yaml
      parameters:
        subscription: ${{ environment.subscription }} 
        group: ${{ environment.group }}
        displayName: Build infrastructure with Terraform

    - template: pipeline/jobs/create-storage.yaml
      parameters:
        subscription: ${{ environment.subscription }}
        dependsOn: Terraform
        displayName: Create Storage
        resourceGroup: $(resourceGroup)
        storageAccount: $(storageAccount)
        variables:
          resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
          storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]

    - ${{ if environment.tests_gradle }}:
      - ${{ each test in environment.tests_gradle }}:

        - template: pipeline/jobs/gradle-test.yaml
          parameters:
            displayName: ${{ test.name }}
            dependsOn: 
            - Terraform
            - createStorage
            # - ${{ if test.dependsOn }}:
            #   - ${{ test.dependsOn }}
            serenity: ${{ test.serenity }}
            subscription: ${{ environment.subscription }}
            apimHost: hmi-apim-svc-${{ environment.name }}.azure-api.net
            command: ${{ test.command }}
            subscriptionKey: $(subscriptionKey)
            resourceGroup: $(resourceGroup)
            storageAccount: $(storageAccount)
            storageContainer: $(storageContainer)
            variables: 
              subscriptionKey: $[dependencies.Terraform.outputs['terraformOutput.subscriptionKey']]
              resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
              storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]
              storageContainer: $[dependencies.createStorage.outputs['createContainer.container']]

    - ${{ if environment.tests_security }}:
      - ${{ each test in environment.tests_security }}:
        - template: pipeline/jobs/security-test.yaml
          parameters:
            dependsOn:
            - Terraform
            - createStorage
            displayName: ${{ test.name }}
            subscription: ${{ environment.subscription }}
            registry: ${{ environment.registry }}
            repository: ${{ test.repository }}
            dockerfile: docker/images/${{ test.name }}/Dockerfile
            tags: latest
            hostVolume: /home/vsts/work/zap/
            containerVolume: /zap/wrk/:rw
            testUrl: https://www.example.com/openapi.json 
            securityRules: https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf
            resourceGroup: $(resourceGroup)
            storageAccount: $(storageAccount)
            storageContainer: $(storageContainer)
            variables:
              resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
              storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]
              storageContainer: $[dependencies.createStorage.outputs['createContainer.container']]
