---
trigger:
  - master
pr:
  - none

parameters:
  - name: environments
    type: object
    default:
    - name: sbox
      subscription: DTS-SHAREDSERVICES-SBOX
      registry: DTS-SS-PRIVATE-SBOX
      group: HMI-APIM-BUILD-SBOX
      custom_domain: hmi-apim.sandbox.platform.hmcts.net
      tests_gradle:
      - name: UnitTest
        command: test
      - name: SmokeTest
        command: smoke
        logLevel: debug
        dependsOn: UnitTest
      - name: AcceptanceTest
        command: acceptance
        logLevel: debug
        dependsOn: SmokeTest
      - name: ContractTest
        command: contract
        brokerUrl: http://hmi-pact.sandbox.platform.hmcts.net
        serenity: false
        dependsOn: AcceptanceTest
      - name: FunctionalTest
        command: functional
        dependsOn: AcceptanceTest
      # tests_security:
      # - name: ApiZapScan
      #   containerRegistry: ssprivatesbox.azurecr.io
      #   repository: hmi/apim-tests-owasp
      #   testUrl:
      #   - name: API1
      #     target: https://www.example.com/openapi.json
      tests_sonarcloud:
      - name: CodeQualityTest
        command: sonarqube

    - name: dev
      subscription: DTS-SHAREDSERVICES-DEV
      group: HMI-APIM-BUILD-DEV
      custom_domain: hmi-apim.preview.platform.hmcts.net
      tests_gradle:
      - name: UnitTest
        command: test
      - name: SmokeTest
        command: smoke
        logLevel: debug
        dependsOn: UnitTest
      - name: AcceptanceTest
        command: acceptance
        logLevel: debug
        dependsOn: SmokeTest

    - name: test
      subscription: DTS-SHAREDSERVICES-TEST
      group: HMI-APIM-BUILD-TEST
      custom_domain: hmi-apim.perftest.platform.hmcts.net
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      tests_gradle:
      - name: UnitTest
        command: test
      - name: SmokeTest
        command: smoke
        logLevel: debug
        dependsOn: UnitTest
      - name: AcceptanceTest
        command: acceptance
        logLevel: debug
        dependsOn: SmokeTest
      - name: ContractTest
        command: contract
        brokerUrl: http://hmi-pact.test.platform.hmcts.net
        dependsOn: AcceptanceTest
      - name: FunctionalTest
        command: functional
        dependsOn: AcceptanceTest
      tests_sonarcloud:
      - name: CodeQualityTest
        command: sonarqube

    - name: stg
      subscription: DTS-SHAREDSERVICES-STG
      group: HMI-APIM-BUILD-STG
      custom_domain: hmi-apim.staging.platform.hmcts.net
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))


variables:
  - group: HMI-APIM-Common

stages:
  - stage: Validate
    jobs:
    - ${{ each environment in parameters.environments }}
    - template: pipeline/jobs/terraform-validate.yaml
      parameters:
        displayName: Build infrastructure with Terraform
        subscription: ${{ environment.subscription }} 
        group: ${{ environment.group }}

# - ${{ each environment in parameters.environments }}:

#   - stage: ${{ environment.name }}
#     ${{ if environment.condition }}:
#       condition: ${{ environment.condition }}
#     displayName: Build and Test ${{ environment.name }} APIM

#     jobs:
#     - template: pipeline/jobs/terraform.yaml
#       parameters:
#         displayName: Build infrastructure with Terraform
#         subscription: ${{ environment.subscription }} 
#         group: ${{ environment.group }}

#     - template: pipeline/jobs/remove-default-apis.yaml
#       parameters:
#         displayName: Remove default APIS
#         subscription: ${{ environment.subscription }}
#         dependsOn: Terraform
#         group: ${{ environment.group }}

#     - template: pipeline/jobs/apply-hostname.yaml
#       parameters:
#         displayName: Apply Custom Domain Configuration
#         dependsOn: Terraform
#         hostName: ${{ environment.custom_domain }}
#         group: ${{ environment.group }}

#     - ${{ if environment.tests_gradle }}:
#       - template: pipeline/jobs/create-storage.yaml
#         parameters:
#           displayName: Create Storage for Test Results
#           subscription: ${{ environment.subscription }}
#           dependsOn: Terraform
#           resourceGroup: $(resourceGroup)
#           storageAccount: $(storageAccount)
#           variables:
#             resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
#             storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]

#     - ${{ if environment.tests_gradle }}:
#       - ${{ each test in environment.tests_gradle }}:
#         - template: pipeline/jobs/gradle-test.yaml
#           parameters:
#             displayName: ${{ test.name }}
#             dependsOn:
#             - Terraform
#             - createStorage
#             - ApplyHostName
#             - ${{ if test.dependsOn }}:
#               - ${{ test.dependsOn }}
#             subscription: ${{ environment.subscription }}
#             pool: hmi-${{ environment.name }}
#             apimHost: ${{ environment.custom_domain }}
#             command: ${{ test.command }}
#             logLevel: ${{ test.logLevel }}
#             pactBrokerUrl: ${{ test.brokerUrl }}
#             subscriptionKey: $(subscriptionKey)
#             resourceGroup: $(resourceGroup)
#             storageAccount: $(storageAccount)
#             storageContainer: $(storageContainer)
#             variables:
#               subscriptionKey: $[dependencies.Terraform.outputs['terraformOutput.subscriptionKey']]
#               resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
#               storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]
#               storageContainer: $[dependencies.createStorage.outputs['createContainer.container']]

#     - ${{ if environment.tests_security }}:
#       - ${{ each test in environment.tests_security }}:
#         - ${{ each url in test.testUrl }}:
#           - template: pipeline/jobs/security-test.yaml
#             parameters:
#               displayName: ${{ url.name }}
#               dependsOn:
#               - Terraform
#               - createStorage
#               - ApplyHostName
#               subscription: ${{ environment.subscription }}
#               registry: ${{ environment.registry }}
#               repository: ${{ test.repository }}
#               containerRegistry: ${{ test.containerRegistry }}
#               dockerfile: docker/images/${{ test.name }}/Dockerfile
#               tags: latest
#               testUrl: ${{ url.target }}
#               securityRules: https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf
#               resourceGroup: $(resourceGroup)
#               storageAccount: $(storageAccount)
#               storageContainer: $(storageContainer)
#               variables:
#                 resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
#                 storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]
#                 storageContainer: $[dependencies.createStorage.outputs['createContainer.container']]
    
#     - ${{ if environment.tests_sonarcloud }}:
#       - ${{ each test in environment.tests_sonarcloud }}:
#         - template: pipeline/jobs/sonarqube-test.yaml
#           parameters:
#             displayName: ${{ test.name }}
#             dependsOn:
#             - UnitTest
#             - SmokeTest
#             - AcceptanceTest
#             - FunctionalTest
#             subscription: ${{ environment.subscription }}
#             command: ${{ test.command }}
