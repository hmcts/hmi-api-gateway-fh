---
trigger:
  - none

parameters:
  - name: environment
    displayName: Environment
    type: string
    default: 'sbox'
    values:
      - sbox
      - test

variables:
  - group: HMI-APIM-Common
  - ${{ if eq(parameters.environment, 'sbox') }}:
    - group: HMI-APIM-BUILD-SBOX
  - ${{ if eq(parameters.environment, 'test') }}:
    - group: HMI-APIM-BUILD-TEST

resources:
  containers:
  # - container: owasp_zap_container
  #   image: hmi/apim-tests-owasp:latest
  #   endpoint: 'DTS-SS-ACRPrivate'
  #   options: --user 0:0

  - container: wiremock_container
    image: hmi/apim-tests-wiremock:latest
    endpoint: 'DTS-SS-ACRPrivate'
    options: --user 0:0

  
stages:

  - stage: TEST
    displayName: Create ACR Images
    jobs:
      - job: BuildACRimage
        pool:
          vmImage: 'ubuntu-latest'

        steps:
        # - template: pipeline/steps/push-img.yaml
        #   parameters:
        #     registry: 'DTS-SS-ACRPrivate'
        #     repository: 'hmi/apim-tests-owasp'
        #     dockerfile: 'pipeline/tests/owasp/Dockerfile'
        #     tags: |
        #       latest

        - template: pipeline/steps/push-img.yaml
          parameters:
            registry: 'DTS-SS-ACRPrivate'
            repository: 'hmi/apim-tests-wiremock'
            dockerfile: 'pipeline/tests/wiremock/Dockerfile'
            tags: |
              latest

  # - stage: OWASP
  #   displayName: Tests - OWASP
  #   jobs:
  #     - job: containerjob
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       container: owasp_zap_container
  #       steps:
  #       - script: ls

  - stage: WIREMOCK
    displayName: Tests - Wiremock
    jobs:
      - job: containerjob
        pool:
          vmImage: 'ubuntu-latest'
        container: wiremock_container
        steps:
        - script: ls



        # steps:
        # - task: AzureCLI@2
        #   displayName: Build and run API ZAP scan
        #   inputs:
        #     azureSubscription: $(subscription)
        #     scriptType: bash
        #     scriptLocation: inlineScript
        #     inlineScript: |
        #       echo "Obtaining container key..."
        #       KEY=$(az storage account keys list -g $(devopsResourceGroup) --account-name $(devopsStorageAccount) --query "[0].value" -o tsv)
        #       echo $KEY
        #       echo "Creating ACI ZAP container..."
        #       az container create -g $(devopsResourceGroup) -n hmi-aci-zap-sbox --image $(owaspZapImage) --azure-file-volume-account-name $(devopsStorageAccount) --azure-file-volume-account-key $KEY --azure-file-volume-share-name $(owaspZapVolume) --azure-file-volume-mount-path /zap/wrk/ --command-line "zap-baseline.py -t https://hmi-apim-svc-sbox.azure-api.net -d -l FAIL -x api_scan.xml -r api_scan.html -w api_scan.md"
        #       sleep 30
        #       echo "Downloading ZAP report..."
        #       az storage file download --account-name $(devopsStorageAccount) --account-key $KEY -s $(owaspZapVolume) -p api_scan.html --dest $(System.DefaultWorkingDirectory)/api_scan.html

        # - task: AzureCLI@2
        #   displayName: Pulish test results
        #   condition: succeededOrFailed()
        #   inputs:
        #     azureSubscription: $(subscription)
        #     scriptType: bash
        #     scriptLocation: inlineScript
        #     inlineScript: |
        #       reportFile=$(System.DefaultWorkingDirectory)/api_scan.html
        #       mdReportFile=$$(System.DefaultWorkingDirectory)/api_scan.md
        #       echo "##vso[task.uploadfile]$reportFile"
        #       # echo "##vso[task.uploadsummary]$mdReportFile"

        # - task: AzureCLI@2
        #   displayName: Delete ACI container
        #   condition: succeededOrFailed()
        #   inputs:
        #     azureSubscription: $(subscription)
        #     scriptType: bash
        #     scriptLocation: inlineScript
        #     inlineScript: |
        #       az container delete -g $(devopsResourceGroup) -n hmi-aci-zap-sbox --yes