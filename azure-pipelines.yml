---
trigger:
  - master
pr:
  - none

parameters:
  - name: environments
    type: object
    default:
    - name: sbox
      subscription: DTS-SHAREDSERVICES-SBOX
      group: HMI-APIM-BUILD-SBOX

    - name: dev
      subscription: DTS-SHAREDSERVICES-DEV
      group: HMI-APIM-BUILD-DEV

    - name: test
      subscription: DTS-SHAREDSERVICES-TEST
      group: HMI-APIM-BUILD-TEST

    - name: stg
      subscription: DTS-SHAREDSERVICES-STG
      group: HMI-APIM-BUILD-STG

    - name: prod
      subscription: DTS-SHAREDSERVICES-PROD
      group: HMI-APIM-BUILD-PROD

variables:
  - group: HMI-APIM-Common

stages:
  - stage: Validate
    jobs:
    - ${{ each environment in parameters.environments }}:
      - template: pipeline/jobs/terraform-validate.yaml
        parameters:
          displayName: Validate ${{ environment.name }}
          subscription: ${{ environment.subscription }} 
          group: ${{ environment.group }}
          environment: ${{ environment.name }}

  - stage: PlanSBOX
    dependsOn: Validate
    jobs:
    - template: pipeline/jobs/terraform-plan.yaml
      parameters:
        displayName: Plan SBOX
        subscription: DTS-SHAREDSERVICES-SBOX
        group: HMI-APIM-BUILD-SBOX

  - stage: PlanDEV
    dependsOn: Validate
    jobs:
    - template: pipeline/jobs/terraform-plan.yaml
      parameters:
        displayName: Plan DEV
        subscription: DTS-SHAREDSERVICES-DEV
        group: HMI-APIM-BUILD-DEV

  - stage: PlanTEST
    dependsOn: Validate
    jobs:
    - template: pipeline/jobs/terraform-plan.yaml
      parameters:
        displayName: Plan TEST
        subscription: DTS-SHAREDSERVICES-TEST
        group: HMI-APIM-BUILD-TEST

  - stage: PlanSTG
    dependsOn: Validate
    jobs:
    - template: pipeline/jobs/terraform-plan.yaml
      parameters:
        displayName: Plan STG
        subscription: DTS-SHAREDSERVICES-STG
        group: HMI-APIM-BUILD-STG

  - stage: PlanPROD
    dependsOn: Validate
    jobs:
    - template: pipeline/jobs/terraform-plan.yaml
      parameters:
        displayName: Plan PROD
        subscription: DTS-SHAREDSERVICES-PROD
        group: HMI-APIM-BUILD-PROD

  - stage: BuildSbox
    dependsOn: PlanSbox
    variables:
      - group: HMI-APIM-BUILD-SBOX
    jobs:
    - template: pipeline/jobs/terraform-apply.yaml
      parameters:
        displayName: Build SBOX
        subscription: DTS-SHAREDSERVICES-SBOX
    - template: pipeline/jobs/remove-default-apis.yaml
      parameters:
        displayName: Remove default APIS
        subscription: DTS-SHAREDSERVICES-SBOX
        dependsOn: TerraformApply
    - template: pipeline/jobs/apply-hostname.yaml
      parameters:
        displayName: Apply Custom Domain Configuration
        dependsOn: TerraformApply

  - stage: BuildDEV
    dependsOn: PlanDev
    variables:
      - group: HMI-APIM-BUILD-DEV
    jobs:
    - template: pipeline/jobs/terraform-apply.yaml
      parameters:
        displayName: Build DEV
        subscription: DTS-SHAREDSERVICES-DEV
    - template: pipeline/jobs/remove-default-apis.yaml
      parameters:
        displayName: Remove default APIS
        subscription: DTS-SHAREDSERVICES-DEV
        dependsOn: TerraformApply
    - template: pipeline/jobs/apply-hostname.yaml
      parameters:
        displayName: Apply Custom Domain Configuration
        dependsOn: TerraformApply

  - stage: BuildTEST
    dependsOn: PlanTest
    variables:
      - group: HMI-APIM-BUILD-TEST
    jobs:
    - template: pipeline/jobs/terraform-apply.yaml
      parameters:
        displayName: Build TEST
        subscription: DTS-SHAREDSERVICES-TEST
    - template: pipeline/jobs/remove-default-apis.yaml
      parameters:
        displayName: Remove default APIS
        subscription: DTS-SHAREDSERVICES-TEST
        dependsOn: TerraformApply
    - template: pipeline/jobs/apply-hostname.yaml
      parameters:
        displayName: Apply Custom Domain Configuration
        dependsOn: TerraformApply

  - stage: TestSBOX
    dependsOn: BuildSbox
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      - group: HMI-APIM-BUILD-SBOX
    jobs:
      - template: pipeline/jobs/create-storage.yaml
        parameters:
          displayName: Create Storage for Test Results
          subscription: DTS-SHAREDSERVICES-SBOX
      
      - template: pipeline/jobs/export-keyvault.yaml
        parameters:
          displayName: Read APIM Subscription Key
          subscription: DTS-SHAREDSERVICES-SBOX

      - template: pipeline/jobs/test-unit.yaml
        parameters:
          displayName: Unit Test
          dependsOn: 
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-SBOX
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]
            
      - template: pipeline/jobs/test-smoke.yaml
        parameters:
          displayName: Smoke Test
          dependsOn: 
          - UnitTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-SBOX
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]

      - template: pipeline/jobs/test-acceptance.yaml
        parameters:
          displayName: Acceptance Test
          dependsOn: 
          - SmokeTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-SBOX
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]

      - template: pipeline/jobs/test-contract.yaml
        parameters:
          displayName: Contract Test
          dependsOn: 
          - AcceptanceTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-SBOX
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]

      - template: pipeline/jobs/test-functional.yaml
        parameters:
          displayName: Functional Test
          dependsOn: 
          - ContractTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-SBOX
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]

      - template: pipeline/jobs/test-codequality.yaml
        parameters:
          displayName: Code Quality Test
      

  - stage: TestDev
    dependsOn: BuildDev
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      - group: HMI-APIM-BUILD-DEV
    jobs:
      - template: pipeline/jobs/create-storage.yaml
        parameters:
          displayName: Create Storage for Test Results
          subscription: DTS-SHAREDSERVICES-DEV
      
      - template: pipeline/jobs/export-keyvault.yaml
        parameters:
          displayName: Read APIM Subscription Key
          subscription: DTS-SHAREDSERVICES-DEV

      - template: pipeline/jobs/test-unit.yaml
        parameters:
          displayName: Unit Test
          dependsOn: 
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-DEV
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]
            
      - template: pipeline/jobs/test-smoke.yaml
        parameters:
          displayName: Smoke Test
          dependsOn: 
          - UnitTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-DEV
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]

      - template: pipeline/jobs/test-acceptance.yaml
        parameters:
          displayName: Acceptance Test
          dependsOn: 
          - SmokeTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-DEV
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]


  - stage: TestTest
    dependsOn: BuildTest
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      - group: HMI-APIM-BUILD-TEST
    jobs:
      - template: pipeline/jobs/create-storage.yaml
        parameters:
          displayName: Create Storage for Test Results
          subscription: DTS-SHAREDSERVICES-TEST
      
      - template: pipeline/jobs/export-keyvault.yaml
        parameters:
          displayName: Read APIM Subscription Key
          subscription: DTS-SHAREDSERVICES-TEST

      - template: pipeline/jobs/test-unit.yaml
        parameters:
          displayName: Unit Test
          dependsOn: 
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-TEST
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]
            
      - template: pipeline/jobs/test-smoke.yaml
        parameters:
          displayName: Smoke Test
          dependsOn: 
          - UnitTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-TEST
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]

      - template: pipeline/jobs/test-acceptance.yaml
        parameters:
          displayName: Acceptance Test
          dependsOn: 
          - SmokeTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-TEST
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]

      - template: pipeline/jobs/test-contract.yaml
        parameters:
          displayName: Contract Test
          dependsOn: 
          - AcceptanceTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-TEST
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]

      - template: pipeline/jobs/test-functional.yaml
        parameters:
          displayName: Functional Test
          dependsOn: 
          - ContractTest
          - CreateStorage
          - ExportKeyVault
          subscription: DTS-SHAREDSERVICES-TEST
          subscriptionKey: $(subscriptionKey)
          storageContainer: $(storageContainer)
          variables:
            storageContainer: $[dependencies.CreateStorage.outputs['createContainer.container']]
            subscriptionKey: $[dependencies.ExportKeyVault.outputs['exportKeyVaultSecret.hmi-apim-sub-key']]

      - template: pipeline/jobs/test-codequality.yaml
        parameters:
          displayName: Code Quality Test


  - stage: BuildStg
    dependsOn: 
      - PlanStg
      - TestSbox
      - TestDev
      - TestTest
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
    - ${{ each environment in parameters.environments }}:
      - job:
        steps:
          - bash: |
              echo "Hello ${{ environment.name }}"

  - stage: BuildProd
    dependsOn: 
      - PlanProd
      - BuildStg
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
    - ${{ each environment in parameters.environments }}:
      - job:
        steps:
          - bash: |
              echo "Hello ${{ environment.name }}"

# - ${{ each environment in parameters.environments }}:

#   - stage: ${{ environment.name }}
#     ${{ if environment.condition }}:
#       condition: ${{ environment.condition }}
#     displayName: Build and Test ${{ environment.name }} APIM

#     jobs:
#     - template: pipeline/jobs/terraform.yaml
#       parameters:
#         displayName: Build infrastructure with Terraform
#         subscription: ${{ environment.subscription }} 
#         group: ${{ environment.group }}

#     - template: pipeline/jobs/remove-default-apis.yaml
#       parameters:
#         displayName: Remove default APIS
#         subscription: ${{ environment.subscription }}
#         dependsOn: Terraform
#         group: ${{ environment.group }}

#     - template: pipeline/jobs/apply-hostname.yaml
#       parameters:
#         displayName: Apply Custom Domain Configuration
#         dependsOn: Terraform
#         hostName: ${{ environment.custom_domain }}
#         group: ${{ environment.group }}

#     - ${{ if environment.tests_gradle }}:
#       - template: pipeline/jobs/create-storage.yaml
#         parameters:
#           displayName: Create Storage for Test Results
#           subscription: ${{ environment.subscription }}
#           dependsOn: Terraform
#           resourceGroup: $(resourceGroup)
#           storageAccount: $(storageAccount)
#           variables:
#             resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
#             storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]

#     - ${{ if environment.tests_gradle }}:
#       - ${{ each test in environment.tests_gradle }}:
#         - template: pipeline/jobs/gradle-test.yaml
#           parameters:
#             displayName: ${{ test.name }}
#             dependsOn:
#             - Terraform
#             - createStorage
#             - ApplyHostName
#             - ${{ if test.dependsOn }}:
#               - ${{ test.dependsOn }}
#             subscription: ${{ environment.subscription }}
#             pool: hmi-${{ environment.name }}
#             apimHost: ${{ environment.custom_domain }}
#             command: ${{ test.command }}
#             logLevel: ${{ test.logLevel }}
#             pactBrokerUrl: ${{ test.brokerUrl }}
#             subscriptionKey: $(subscriptionKey)
#             resourceGroup: $(resourceGroup)
#             storageAccount: $(storageAccount)
#             storageContainer: $(storageContainer)
#             variables:
#               subscriptionKey: $[dependencies.Terraform.outputs['terraformOutput.subscriptionKey']]
#               resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
#               storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]
#               storageContainer: $[dependencies.createStorage.outputs['createContainer.container']]

#     - ${{ if environment.tests_security }}:
#       - ${{ each test in environment.tests_security }}:
#         - ${{ each url in test.testUrl }}:
#           - template: pipeline/jobs/security-test.yaml
#             parameters:
#               displayName: ${{ url.name }}
#               dependsOn:
#               - Terraform
#               - createStorage
#               - ApplyHostName
#               subscription: ${{ environment.subscription }}
#               registry: ${{ environment.registry }}
#               repository: ${{ test.repository }}
#               containerRegistry: ${{ test.containerRegistry }}
#               dockerfile: docker/images/${{ test.name }}/Dockerfile
#               tags: latest
#               testUrl: ${{ url.target }}
#               securityRules: https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf
#               resourceGroup: $(resourceGroup)
#               storageAccount: $(storageAccount)
#               storageContainer: $(storageContainer)
#               variables:
#                 resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
#                 storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]
#                 storageContainer: $[dependencies.createStorage.outputs['createContainer.container']]
    
#     - ${{ if environment.tests_sonarcloud }}:
#       - ${{ each test in environment.tests_sonarcloud }}:
#         - template: pipeline/jobs/sonarqube-test.yaml
#           parameters:
#             displayName: ${{ test.name }}
#             dependsOn:
#             - UnitTest
#             - SmokeTest
#             - AcceptanceTest
#             - FunctionalTest
#             subscription: ${{ environment.subscription }}
#             command: ${{ test.command }}
