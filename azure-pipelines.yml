---
trigger:
  - master
pr:
  - none

parameters:
  - name: environments
    type: object
    default: 
    - name: sbox
      subscription: DTS-SHAREDSERVICES-SBOX
      group: HMI-APIM-BUILD-SBOX
      registry: DTS-SS-PRIVATE-SBOX
      custom_domain: hmi-apim-sbox.sandbox.platform.hmcts.net
      tests_gradle:
      - name: UnitTest
        command: test
        logLevel: info
        serenity: true
      - name: SmokeTest
        command: smoke
        logLevel: debug
        serenity: false
        dependsOn: UnitTest
      - name: AcceptanceTest
        command: acceptance
        logLevel: debug
        serenity: false
        dependsOn: SmokeTest
      - name: FunctionalTest
        command: functional
        logLevel: info
        serenity: true
        dependsOn: AcceptanceTest
      tests_security:
      - name: ApiZapScan
        containerRegistry: ssprivatesbox.azurecr.io
        repository: hmi/apim-tests-owasp

    # - name: dev
    #   subscription: DTS-SHAREDSERVICES-DEV
    #   group: HMI-APIM-BUILD-DEV
    #   custom_domain: hmi-apim-svc-dev.azure-api.net # change this later to hmcts!
    #   tests_gradle:
    #   - name: UnitTest
    #     command: test
    #     logLevel: info
    #     serenity: true
    #   - name: SmokeTest
    #     command: smoke
    #     logLevel: debug
    #     serenity: false
    #     dependsOn: UnitTest
    #   - name: AcceptanceTest
    #     command: acceptance
    #     logLevel: debug
    #     serenity: false
    #     dependsOn: SmokeTest

    # - name: test
    #   subscription: DTS-SHAREDSERVICES-TEST
    #   group: HMI-APIM-BUILD-TEST
    #   custom_domain: hmi-apim-svc-test.azure-api.net # change this later to hmcts!
    #   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    #   tests_gradle:
    #   - name: UnitTest
    #     command: test
    #     logLevel: info
    #     serenity: true
    #   - name: SmokeTest
    #     command: smoke
    #     logLevel: debug
    #     serenity: false
    #     dependsOn: UnitTest
    #   - name: AcceptanceTest
    #     command: acceptance
    #     logLevel: debug
    #     serenity: false
    #     dependsOn: SmokeTest
    #   - name: FunctionalTest
    #     command: functional
    #     logLevel: info
    #     serenity: true
    #     dependsOn: AcceptanceTest

variables:
  - group: HMI-APIM-Common

stages:

- ${{ each environment in parameters.environments }}:

  - stage: ${{ environment.name }}
    ${{ if environment.condition }}:
      condition: ${{ environment.condition }}
    displayName: Build and Test ${{ environment.name }} APIM
    jobs:

    - template: pipeline/jobs/terraform.yaml
      parameters:
        displayName: Build infrastructure with Terraform
        subscription: ${{ environment.subscription }} 
        group: ${{ environment.group }}
        shared_infra_kv: hmi-sharedinfra-kv-${{ environment.name }}
        shared_infra_rg: hmi-sharedinfra-${{ environment.name }}-rg

    - ${{ if eq(environment.name, 'sbox') }}:
      - template: pipeline/jobs/apply-hostname.yaml
        parameters:
          subscription: ${{ environment.subscription }}
          displayName: Apply Custom Domain Configuration
          dependsOn: Terraform
          resourceGroup: $(resourceGroup)
          certificateUrl: "https://hmi-sharedinfra-kv-sbox.vault.azure.net/secrets/temp-cert" # WIP!
          hostName: "hmi-apim-sbox.sandbox.platform.hmcts.net"
          variables:
            resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]

    # - template: pipeline/jobs/create-storage.yaml
    #   parameters:
    #     displayName: Create Storage for Test Results
    #     subscription: ${{ environment.subscription }}
    #     dependsOn: Terraform
    #     resourceGroup: $(resourceGroup)
    #     storageAccount: $(storageAccount)
    #     variables:
    #       resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
    #       storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]

    # - ${{ if environment.tests_gradle }}:
    #   - ${{ each test in environment.tests_gradle }}:

    #     - template: pipeline/jobs/gradle-test.yaml
    #       parameters:
    #         displayName: ${{ test.name }}
    #         dependsOn:
    #         - Terraform
    #         - createStorage
    #         - ${{ if test.dependsOn }}:
    #           - ${{ test.dependsOn }}
    #         serenity: ${{ test.serenity }}
    #         subscription: ${{ environment.subscription }}
    #         apimHost: ${{ environment.custom_domain }}
    #         command: ${{ test.command }}
    #         logLevel: ${{ test.logLevel }}
    #         subscriptionKey: $(subscriptionKey)
    #         resourceGroup: $(resourceGroup)
    #         storageAccount: $(storageAccount)
    #         storageContainer: $(storageContainer)
    #         variables:
    #           subscriptionKey: $[dependencies.Terraform.outputs['terraformOutput.subscriptionKey']]
    #           resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
    #           storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]
    #           storageContainer: $[dependencies.createStorage.outputs['createContainer.container']]

    # - ${{ if environment.tests_security }}:
    #   - ${{ each test in environment.tests_security }}:
    #     - template: pipeline/jobs/security-test.yaml
    #       parameters:
    #         displayName: ${{ test.name }}
    #         dependsOn:
    #         - Terraform
    #         - createStorage
    #         subscription: ${{ environment.subscription }}
    #         registry: ${{ environment.registry }}
    #         repository: ${{ test.repository }}
    #         containerRegistry: ${{ test.containerRegistry }}
    #         dockerfile: docker/images/${{ test.name }}/Dockerfile
    #         tags: latest
    #         testUrl: https://www.example.com/openapi.json 
    #         securityRules: https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf
    #         resourceGroup: $(resourceGroup)
    #         storageAccount: $(storageAccount)
    #         storageContainer: $(storageContainer)
    #         variables:
    #           resourceGroup: $[dependencies.Terraform.outputs['terraformOutput.resourceGroup']]
    #           storageAccount: $[dependencies.Terraform.outputs['terraformOutput.storageAccount']]
    #           storageContainer: $[dependencies.createStorage.outputs['createContainer.container']]
    
    # - ${{ if ne(environment.name, 'dev') }}:
    #   - template: pipeline/jobs/sonarqubetest.yaml
    #     parameters:
    #       displayName: 'Sonarcloudtest'
    #       dependsOn:
    #       - Terraform
    #       - createStorage
    #       command: sonarqube --stacktrace -$(Psonar.login)       
