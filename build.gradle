plugins {
    id 'application'
    id 'checkstyle'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
    id 'org.springframework.boot' version '2.7.10'
    id 'org.owasp.dependencycheck' version '8.1.2'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'pmd'
    id 'org.gradle.test-retry' version '1.5.2'
    id 'io.freefair.lombok' version '6.6.3'
}

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

group = 'uk.gov.hmcts.futurehearings'
version = '0.0.1'

defaultTasks 'clean', 'test', 'aggregate'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources {
            srcDir file('src/functionalTest/resources')
        }
    }

    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    acceptanceTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/acceptanceTest/java')
        }
        resources.srcDir file('src/acceptanceTest/resources')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    description = "Runs unit tests"
    group = 'Delivery pipeline'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    failFast = true
    useJUnitPlatform()
}

task functional(type: Test) {
    description = "Runs functional tests"
    group = 'Delivery pipeline'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task smoke(type: Test) {
    retry {
        maxRetries = 2
        maxFailures = 5
        failOnPassedAfterRetry = false
    }
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

task acceptance(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the QA Acceptance tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}

clean {
    delete System.getProperty("pact.rootDir") + "/*.json"
}

checkstyle {
    maxWarnings = 0
    toolVersion = '10.5.0'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
    toolVersion = "6.52.0"
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    // https://github.com/pmd/pmd/issues/876
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "HMI :: Hearing Management Interface API"
        property "sonar.projectKey", "HMIAPI"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "hmcts"
        property "sonar.sources", "src/main/java,pipeline,infrastructure"
        property "sonar.tests", "src/test/java,src/smokeTest/java,src/acceptanceTest/java,src/functionalTest/java"
    }
}
project.tasks['sonarqube'].group = "Verification"

// before committing a change, make sure task still works
dependencyUpdates {
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
        return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

dependencyManagement {
    dependencies {
        dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'
        // CVE-2018-10237 - Unbounded memory allocation
        dependencySet(group: 'com.google.guava', version: '31.1-jre') {
            entry 'guava'
        }
    }
}

def versions = [
        junit           : '5.6.2',
        junitPlatform   : '1.6.2',
        springBoot      : springBoot.class.package.implementationVersion,
        restAssured     : '5.3.0',
        aventstack      : '5.0.2'
]

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
                "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
        ]
]

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    testImplementation group: 'io.rest-assured', name: 'json-schema-validator', version: versions.restAssured
    testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
    testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
    testImplementation "org.junit.jupiter:junit-jupiter:${versions.junit}"
    testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-api', version: versions.junitPlatform
    testImplementation group: 'com.aventstack', name: 'extentreports', version: versions.aventstack

    smokeTestImplementation sourceSets.main.runtimeClasspath
    smokeTestImplementation sourceSets.test.runtimeClasspath
    acceptanceTestImplementation sourceSets.main.runtimeClasspath
    acceptanceTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation("org.springframework.boot:spring-boot-starter-test")
    functionalTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    functionalTestImplementation group: 'io.rest-assured', name: 'json-schema-validator', version: versions.restAssured
    functionalTestImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
    functionalTestImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
}

mainClassName = 'uk.gov.hmcts.reform.demo.Application'

bootJar {
    getArchiveFileName().set(provider {
        'spring-boot-template.jar'
    })

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
    duplicatesStrategy = 'include'
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named('processFunctionalTestResources') {
    duplicatesStrategy = 'include'
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named('processAcceptanceTestResources') {
    duplicatesStrategy = 'include'
}