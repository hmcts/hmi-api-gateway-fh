{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workflows_hmidturota_name": {
            "defaultValue": "hmidturotadevla",
            "type": "String"
        },
        "storageAccountName": {
            "type": "string"
        },
        "storageAccessKey": {
            "type": "securestring"
        },
        "storageACPathFiles": {
            "type": "string"
        },
        "storageACGetPath": {
            "type": "string"
        },
        "storageACGetPathSuffix": {
            "type": "string"
        },
        "environmentName": {
            "type": "string"
        },
         "appId": {
            "type": "securestring"
        }, 
        "appSecret": {
            "type": "securestring"
        }, 
        "tenantId": {
            "type": "securestring"
        }, 
        "keyvaultName": {
            "type": "string"
        },
        "hmiSchedulesUrl": {
            "type": "string"
        },
        "serviceNowHostUrl": {
            "type": "string"
        },
        "hmiScopeUrl": {
            "type": "string"
        },
        "serviceNowAssignemntGroupId": {
            "type": "string"
        },
        "serviceNowUserRoleTypeId": {
            "type": "string"
        },
        "serviceNowServiceOfferingId": {
            "type": "string"
        },
        "serviceNowCallerId": {
            "type": "string"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "location": "[resourceGroup().location]",
            "name": "azureblob",
            "properties": {
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                },
                "displayName": "HMI DTU Rota",
                "parameterValues": {
                    "accountName": "[parameters('storageAccountName')]",
                    "accessKey": "[parameters('storageAccessKey')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "keyvault",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "HMI Key Vault",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                },
                "parameterValues": {
                    "token:clientId": "[parameters('appId')]",
                    "token:clientSecret": "[parameters('appSecret')]",
                    "token:TenantId": "[parameters('tenantId')]",
                    "token:grantType": "client_credentials",
                    "vaultName": "[parameters('keyvaultName')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('workflows_hmidturota_name')]",
            "location": "uksouth",
            "tags": {
                "environment": "[parameters('environmentName')]",
                "application": "hearing-management-interface",
                "businessarea": "cross-cutting"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', 'azureblob')]",
                "[resourceId('Microsoft.Web/connections', 'keyvault')]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 60
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Create_read.me": {
                            "runAfter": {
                                "Initialize_johIdIsPresiding": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@concat('Rota files to be processed')",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/files",
                                "queries": {
                                    "folderPath": "/rota/input",
                                    "name": "read.me",
                                    "queryParametersSingleEncoded": true
                                }
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "For_each_File": {
                            "foreach": "@body('List_blobs')?['value']",
                            "actions": {
                                "Create_blob_output": {
                                    "runAfter": {
                                        "is_file_xml": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@body('Get_blob_content_using_path')",
                                        "headers": {
                                            "ReadFileMetadataFromServer": true
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "[parameters('storageACPathFiles')]",
                                        "queries": {
                                            "folderPath": "/rota/output/",
                                            "name": "@items('For_each_File')?['Name']",
                                            "queryParametersSingleEncoded": true
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "Delete_source_blob": {
                                    "runAfter": {
                                        "Create_blob_output": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "headers": {
                                            "SkipDeleteIfFileNotFoundOnServer": false
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "delete",
                                        "path": "[parameters('storageACGetPathSuffix')]"
                                    }
                                },
                                "Get_blob_content_using_path": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/datasets/default/GetFileContentByPath",
                                        "queries": {
                                            "inferContentType": true,
                                            "path": "@items('For_each_File')?['Path']",
                                            "queryParametersSingleEncoded": true
                                        }
                                    }
                                },
                                "Recreate_read.me": {
                                    "runAfter": {
                                        "Delete_source_blob": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@concat('Rota files to be processed')",
                                        "headers": {
                                            "ReadFileMetadataFromServer": true
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "[parameters('storageACPathFiles')]",
                                        "queries": {
                                            "folderPath": "/rota/input/",
                                            "name": "read.me",
                                            "queryParametersSingleEncoded": true
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "is_file_xml": {
                                    "actions": {
                                        "For_each__Schedule": {
                                            "foreach": "@body('Parse_jsonSchedules')?['schedules']?['schedule']",
                                            "actions": {
                                                "Compose_sessionRequest": {
                                                    "runAfter": {
                                                        "Parse_Magistrate_File": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Compose",
                                                    "inputs": {
                                                        "courtId": "@{body('Parse_CPL_File')?['locationId']}",
                                                        "courtRoomId": "@{body('Parse_CPL_File')?['venueId']}",
                                                        "johs": [
                                                            {
                                                                "isPresiding": "true",
                                                                "johId": "@{body('Parse_Magistrate_File')?['emailAddress']}",
                                                                "slot": "@{items('For_each__Schedule')?['slot']}"
                                                            }
                                                        ],
                                                        "sessionDuration": "@variables('sessionDuration')",
                                                        "sessionReference": "@{items('For_each__Schedule')?['@id']}",
                                                        "sessionStart": "@{variables('sessionStart')}"
                                                    }
                                                },
                                                "Condition_HMI_Success": {
                                                    "actions": {},
                                                    "runAfter": {
                                                        "HTTP_HMI_Schedules": [
                                                            "Succeeded",
                                                            "Failed"
                                                        ]
                                                    },
                                                    "else": {
                                                        "actions": {
                                                            "Condition_HMI_Failed": {
                                                                "actions": {
                                                                    "Create_blob_in_error_folder": {
                                                                        "runAfter": {
                                                                            "HTTP_SN_Incident": [
                                                                                "Succeeded"
                                                                            ]
                                                                        },
                                                                        "type": "ApiConnection",
                                                                        "inputs": {
                                                                            "body": "@body('Get_blob_content_using_path')",
                                                                            "headers": {
                                                                                "ReadFileMetadataFromServer": true
                                                                            },
                                                                            "host": {
                                                                                "connection": {
                                                                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                                                }
                                                                            },
                                                                            "method": "post",
                                                                            "path": "[parameters('storageACPathFiles')]",
                                                                            "queries": {
                                                                                "folderPath": "/rota/error/",
                                                                                "name": "@items('For_each_File')?['Name']",
                                                                                "queryParametersSingleEncoded": true
                                                                            }
                                                                        },
                                                                        "runtimeConfiguration": {
                                                                            "contentTransfer": {
                                                                                "transferMode": "Chunked"
                                                                            }
                                                                        }
                                                                    },
                                                                    "Delete_file_SN": {
                                                                        "runAfter": {
                                                                            "Create_blob_in_error_folder": [
                                                                                "Succeeded"
                                                                            ]
                                                                        },
                                                                        "type": "ApiConnection",
                                                                        "inputs": {
                                                                            "headers": {
                                                                                "SkipDeleteIfFileNotFoundOnServer": false
                                                                            },
                                                                            "host": {
                                                                                "connection": {
                                                                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                                                }
                                                                            },
                                                                            "method": "delete",
                                                                            "path": "[parameters('storageACGetPathSuffix')]"
                                                                        }
                                                                    },
                                                                    "Get_SN_Client": {
                                                                        "runAfter": {},
                                                                        "type": "ApiConnection",
                                                                        "inputs": {
                                                                            "host": {
                                                                                "connection": {
                                                                                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                                                }
                                                                            },
                                                                            "method": "get",
                                                                            "path": "/secrets/@{encodeURIComponent('hmi-servicenow-client')}/value"
                                                                        }
                                                                    },
                                                                    "Get_SN_Secret": {
                                                                        "runAfter": {
                                                                            "Get_SN_Client": [
                                                                                "Succeeded"
                                                                            ]
                                                                        },
                                                                        "type": "ApiConnection",
                                                                        "inputs": {
                                                                            "host": {
                                                                                "connection": {
                                                                                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                                                }
                                                                            },
                                                                            "method": "get",
                                                                            "path": "/secrets/@{encodeURIComponent('hmi-servicenow-secret')}/value"
                                                                        }
                                                                    },
                                                                    "HTTP_SN_Incident": {
                                                                        "runAfter": {
                                                                            "Get_SN_Secret": [
                                                                                "Succeeded"
                                                                            ]
                                                                        },
                                                                        "type": "Http",
                                                                        "inputs": {
                                                                            "authentication": {
                                                                                "password": "@body('Get_SN_Secret')?['value']",
                                                                                "type": "Basic",
                                                                                "username": "@body('Get_SN_Client')?['value']"
                                                                            },
                                                                            "body": {
                                                                                "assignment_group": "[parameters('serviceNowAssignemntGroupId')]",
                                                                                "caller_id": "[parameters('serviceNowCallerId')]",
                                                                                "category": "Data Issue",
                                                                                "contact_type": "Alert",
                                                                                "description": "@{body('HTTP_HMI_Schedules')}",
                                                                                "impact": "2",
                                                                                "service_offering": "[parameters('serviceNowServiceOfferingId')]",
                                                                                "short_description": "HMI Rota File Error @{items('For_each_File')?['Path']}",
                                                                                "subcategory": "Data or File Error - other",
                                                                                "u_role_type": "[parameters('serviceNowUserRoleTypeId')]",
                                                                                "urgency": "3"
                                                                            },
                                                                            "method": "POST",
                                                                            "uri": "[parameters('serviceNowHostUrl')]"
                                                                        }
                                                                    }
                                                                },
                                                                "runAfter": {},
                                                                "expression": {
                                                                    "or": [
                                                                        {
                                                                            "equals": [
                                                                                "@outputs('HTTP_HMI_Schedules')['statusCode']",
                                                                                500
                                                                            ]
                                                                        },
                                                                        {
                                                                            "equals": [
                                                                                "@outputs('HTTP_HMI_Schedules')['statusCode']",
                                                                                400
                                                                            ]
                                                                        },
                                                                        {
                                                                            "equals": [
                                                                                "@outputs('HTTP_HMI_Schedules')['statusCode']",
                                                                                406
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "type": "If"
                                                            }
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "equals": [
                                                                    "@outputs('HTTP_HMI_Schedules')['statusCode']",
                                                                    201
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "Condition_is_session_AM": {
                                                    "actions": {
                                                        "Set_sessionDurationAM": {
                                                            "runAfter": {
                                                                "Set_sessionStartAM": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "sessionDuration",
                                                                "value": "180"
                                                            }
                                                        },
                                                        "Set_sessionStartAM": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "sessionStart",
                                                                "value": "@{body('Parse_CPL_File')?['sessionDate']}T10:00Z"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Parse_CPL_File": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "else": {
                                                        "actions": {
                                                            "Set_sessionDurationPM": {
                                                                "runAfter": {
                                                                    "Set_sessionStartPM": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "sessionDuration",
                                                                    "value": "120"
                                                                }
                                                            },
                                                            "Set_sessionStartPM": {
                                                                "runAfter": {},
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "sessionStart",
                                                                    "value": "@{body('Parse_CPL_File')?['sessionDate']}T14:00Z"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "equals": [
                                                                    "@body('Parse_CPL_File')?['session']",
                                                                    "AM"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "Get_CLP_Repository": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                            }
                                                        },
                                                        "method": "get",
                                                        "path": "[parameters('storageACGetPath')]",
                                                        "queries": {
                                                            "inferContentType": true,
                                                            "path": "/rota/repository/clp/@{items('For_each__Schedule')?['courtListingProfile']?['@idref']}.json",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    }
                                                },
                                                "Get_Magistrate_Reposiotry": {
                                                    "runAfter": {
                                                        "Condition_is_session_AM": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                            }
                                                        },
                                                        "method": "get",
                                                        "path": "[parameters('storageACGetPath')]",
                                                        "queries": {
                                                            "inferContentType": true,
                                                            "path": "/rota/repository/magistrates/@{items('For_each__Schedule')?['justice']?['@idref']}.json",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    }
                                                },
                                                "HTTP_HMI_Schedules": {
                                                    "runAfter": {
                                                        "Compose_sessionRequest": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http",
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "api://d49d7fa2-6904-4223-a907-3b8992af4190",
                                                            "clientId": "@body('Get_HMI_Client')?['value']",
                                                            "secret": "@body('Get_HMI_secret')?['value']",
                                                            "tenant": "531ff96d-0ae9-462a-8d2d-bec7c0b42082",
                                                            "type": "ActiveDirectoryOAuth"
                                                        },
                                                        "body": "@outputs('Compose_sessionRequest')",
                                                        "headers": {
                                                            "Accept": "application/json",
                                                            "Content-Type": "application/json",
                                                            "Destination-System": "MOCK",
                                                            "Request-Created-At": "@{utcNow('yyyy-MM-ddTHH:mm:ssZ')}",
                                                            "Source-System": "CFT"
                                                        },
                                                        "method": "POST",
                                                        "uri": "[parameters('hmiSchedulesUrl')]"
                                                    }
                                                },
                                                "Parse_CPL_File": {
                                                    "runAfter": {
                                                        "Set_jsonCLProfile": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@variables('jsonCLProfiles')",
                                                        "schema": {
                                                            "properties": {
                                                                "@@id": {
                                                                    "type": "string"
                                                                },
                                                                "business": {
                                                                    "type": "string"
                                                                },
                                                                "locationId": {
                                                                    "type": "string"
                                                                },
                                                                "panel": {
                                                                    "type": "string"
                                                                },
                                                                "session": {
                                                                    "type": "string"
                                                                },
                                                                "sessionDate": {
                                                                    "type": "string"
                                                                },
                                                                "updatedDate": {
                                                                    "type": "string"
                                                                },
                                                                "venueId": {
                                                                    "type": "string"
                                                                },
                                                                "welshSpeaking": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "Parse_Magistrate_File": {
                                                    "runAfter": {
                                                        "Set_jsonMagistrate": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@variables('jsonMagistrates')",
                                                        "schema": {
                                                            "properties": {
                                                                "@@id": {
                                                                    "type": "string"
                                                                },
                                                                "emailAddress": {
                                                                    "type": "string"
                                                                },
                                                                "forenames": {
                                                                    "type": "string"
                                                                },
                                                                "surname": {
                                                                    "type": "string"
                                                                },
                                                                "title": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "Set_jsonCLProfile": {
                                                    "runAfter": {
                                                        "Get_CLP_Repository": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "jsonCLProfiles",
                                                        "value": "@{body('Get_CLP_Repository')}"
                                                    }
                                                },
                                                "Set_jsonMagistrate": {
                                                    "runAfter": {
                                                        "Get_Magistrate_Reposiotry": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "jsonMagistrates",
                                                        "value": "@{body('Get_Magistrate_Reposiotry')}"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_jsonSchedules": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_jsonCLP": {
                                            "foreach": "@body('Parse_CourtLocationProfiles')?['courtListingProfiles']?['courtListingProfile']",
                                            "actions": {
                                                "Create_jsonCLP_File": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "@items('For_jsonCLP')",
                                                        "headers": {
                                                            "ReadFileMetadataFromServer": true
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "[parameters('storageACPathFiles')]",
                                                        "queries": {
                                                            "folderPath": "/rota/repository/clp/",
                                                            "name": "@{items('For_jsonCLP')?['@id']}.json",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    },
                                                    "runtimeConfiguration": {
                                                        "contentTransfer": {
                                                            "transferMode": "Chunked"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_CourtLocationProfiles": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_jsonJudge": {
                                            "foreach": "@body('Parse_Judges')?['districtJudges']?['districtJudge']",
                                            "actions": {
                                                "Create_jsonJudge_File": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "@items('For_jsonJudge')",
                                                        "headers": {
                                                            "ReadFileMetadataFromServer": true
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "[parameters('storageACPathFiles')]",
                                                        "queries": {
                                                            "folderPath": "/rota/repository/magistrates/",
                                                            "name": "@{items('For_jsonJudge')?['@id']}.json",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    },
                                                    "runtimeConfiguration": {
                                                        "contentTransfer": {
                                                            "transferMode": "Chunked"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_Judges": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_jsonMagistrate": {
                                            "foreach": "@body('Parse_Magistrates')?['magistrates']?['magistrate']",
                                            "actions": {
                                                "Create_jsonMagistrate_File": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "@items('For_jsonMagistrate')",
                                                        "headers": {
                                                            "ReadFileMetadataFromServer": true
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "[parameters('storageACPathFiles')]",
                                                        "queries": {
                                                            "folderPath": "/rota/repository/magistrates/",
                                                            "name": "@{items('For_jsonMagistrate')?['@id']}.json",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    },
                                                    "runtimeConfiguration": {
                                                        "contentTransfer": {
                                                            "transferMode": "Chunked"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_Magistrates": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "Get_HMI_Client": {
                                            "runAfter": {
                                                "For_jsonCLP": [
                                                    "Succeeded"
                                                ],
                                                "For_jsonJudge": [
                                                    "Succeeded"
                                                ],
                                                "For_jsonMagistrate": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/secrets/@{encodeURIComponent('hmi-client-app-client')}/value"
                                            }
                                        },
                                        "Get_HMI_secret": {
                                            "runAfter": {
                                                "Get_HMI_Client": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/secrets/@{encodeURIComponent('hmi-client-app-secret')}/value"
                                            }
                                        },
                                        "Parse_CourtLocationProfiles": {
                                            "runAfter": {
                                                "Set_jsonSchedules": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@variables('jsonCLProfiles')",
                                                "schema": {
                                                    "properties": {
                                                        "courtListingProfiles": {
                                                            "properties": {
                                                                "courtListingProfile": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "@@id": {
                                                                                "type": "string"
                                                                            },
                                                                            "business": {
                                                                                "type": "string"
                                                                            },
                                                                            "locationId": {
                                                                                "type": "string"
                                                                            },
                                                                            "panel": {
                                                                                "type": "string"
                                                                            },
                                                                            "session": {
                                                                                "type": "string"
                                                                            },
                                                                            "sessionDate": {
                                                                                "type": "string"
                                                                            },
                                                                            "updatedDate": {
                                                                                "type": "string"
                                                                            },
                                                                            "venueId": {
                                                                                "type": "string"
                                                                            },
                                                                            "welshSpeaking": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "@@id",
                                                                            "sessionDate",
                                                                            "session",
                                                                            "panel",
                                                                            "business",
                                                                            "venueId",
                                                                            "locationId",
                                                                            "welshSpeaking",
                                                                            "updatedDate"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Parse_Judges": {
                                            "runAfter": {
                                                "Set_jsonSchedules": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@variables('jsonJudges')",
                                                "schema": {
                                                    "properties": {
                                                        "districtJudges": {
                                                            "properties": {
                                                                "districtJudge": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "@@id": {
                                                                                "type": "string"
                                                                            },
                                                                            "emailAddress": {
                                                                                "type": "string"
                                                                            },
                                                                            "forenames": {
                                                                                "type": "string"
                                                                            },
                                                                            "surname": {
                                                                                "type": "string"
                                                                            },
                                                                            "title": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "@@id",
                                                                            "title",
                                                                            "surname",
                                                                            "forenames",
                                                                            "emailAddress"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Parse_Magistrates": {
                                            "runAfter": {
                                                "Set_jsonSchedules": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@variables('jsonMagistrates')",
                                                "schema": {
                                                    "properties": {
                                                        "magistrates": {
                                                            "properties": {
                                                                "magistrate": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "@@id": {
                                                                                "type": "string"
                                                                            },
                                                                            "emailAddress": {
                                                                                "type": "string"
                                                                            },
                                                                            "forenames": {
                                                                                "type": "string"
                                                                            },
                                                                            "surname": {
                                                                                "type": "string"
                                                                            },
                                                                            "title": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "@@id",
                                                                            "title",
                                                                            "surname",
                                                                            "forenames",
                                                                            "emailAddress"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Parse_jsonSchedules": {
                                            "runAfter": {
                                                "Get_HMI_secret": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@variables('jsonSchedules')",
                                                "schema": {
                                                    "properties": {
                                                        "schedules": {
                                                            "properties": {
                                                                "schedule": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "@@id": {
                                                                                "type": "string"
                                                                            },
                                                                            "courtListingProfile": {
                                                                                "properties": {
                                                                                    "@@idref": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "justice": {
                                                                                "properties": {
                                                                                    "@@idref": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "slot": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "@@id",
                                                                            "courtListingProfile",
                                                                            "justice",
                                                                            "slot"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Set_jsonCLProfiles": {
                                            "runAfter": {
                                                "Set_jsonLocations": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "jsonCLProfiles",
                                                "value": "@{json(xml(substring(\n    variables('xmlPayload'), \n    indexOf(variables('xmlPayload'), '<courtListingProfiles>'), \n    sub(\n        add(indexOf(variables('xmlPayload'), '</courtListingProfiles>'), length('</courtListingProfiles>')),\n        indexOf(variables('xmlPayload'), '<courtListingProfiles>')\n    )\n)))}"
                                            }
                                        },
                                        "Set_jsonJudges": {
                                            "runAfter": {
                                                "Set_jsonMagistrates": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "jsonJudges",
                                                "value": "@{json(xml(substring(\n    variables('xmlPayload'), \n    indexOf(variables('xmlPayload'), '<districtJudges>'), \n    sub(\n        add(indexOf(variables('xmlPayload'), '</districtJudges>'), length('</districtJudges>')),\n        indexOf(variables('xmlPayload'), '<districtJudges>')\n    )\n)))}"
                                            }
                                        },
                                        "Set_jsonLocations": {
                                            "runAfter": {
                                                "Set_jsonVenues": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "jsonLocations",
                                                "value": "@{json(xml(substring(\n    variables('xmlPayload'), \n    indexOf(variables('xmlPayload'), '<locations>'), \n    sub(\n        add(indexOf(variables('xmlPayload'), '</locations>'), length('</locations>')),\n        indexOf(variables('xmlPayload'), '<locations>')\n    )\n)))}"
                                            }
                                        },
                                        "Set_jsonMagistrates": {
                                            "runAfter": {
                                                "Set_xmlPayload": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "jsonMagistrates",
                                                "value": "@{json(xml(substring(\n    variables('xmlPayload'), \n    indexOf(variables('xmlPayload'), '<magistrates>'), \n    sub(\n        add(indexOf(variables('xmlPayload'), '</magistrates>'), length('</magistrates>')),\n        indexOf(variables('xmlPayload'), '<magistrates>')\n    )\n)))}"
                                            }
                                        },
                                        "Set_jsonSchedules": {
                                            "runAfter": {
                                                "Set_jsonCLProfiles": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "jsonSchedules",
                                                "value": "@{json(xml(substring(\n    variables('xmlPayload'), \n    indexOf(variables('xmlPayload'), '<schedules>'), \n    sub(\n        add(indexOf(variables('xmlPayload'), '</schedules>'), length('</schedules>')),\n        indexOf(variables('xmlPayload'), '<schedules>')\n    )\n)))}"
                                            }
                                        },
                                        "Set_jsonVenues": {
                                            "runAfter": {
                                                "Set_jsonJudges": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "jsonVenues",
                                                "value": "@{json(xml(substring(\n    variables('xmlPayload'), \n    indexOf(variables('xmlPayload'), '<venues>'), \n    sub(\n        add(indexOf(variables('xmlPayload'), '</venues>'), length('</venues>')),\n        indexOf(variables('xmlPayload'), '<venues>')\n    )\n)))}"
                                            }
                                        },
                                        "Set_xmlPayload": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "xmlPayload",
                                                "value": "@{body('Get_blob_content_using_path')}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Get_blob_content_using_path": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Create_File_in_Error_Folder": {
                                                "runAfter": {},
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "@body('Get_blob_content_using_path')",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/datasets/default/files",
                                                    "queries": {
                                                        "folderPath": "/rota/error/",
                                                        "name": "@items('For_each_File')?['Name']",
                                                        "queryParametersSingleEncoded": true
                                                    }
                                                },
                                                "runtimeConfiguration": {
                                                    "contentTransfer": {
                                                        "transferMode": "Chunked"
                                                    }
                                                }
                                            },
                                            "Delete_blob": {
                                                "runAfter": {
                                                    "Create_File_in_Error_Folder": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "delete",
                                                    "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(items('For_each_File')?['Path']))}"
                                                }
                                            },
                                            "Update_read.me": {
                                                "runAfter": {
                                                    "Delete_blob": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "@concat('Rota files to be processed')",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/datasets/default/files",
                                                    "queries": {
                                                        "folderPath": "/rota/input",
                                                        "name": "read.me",
                                                        "queryParametersSingleEncoded": true
                                                    }
                                                },
                                                "runtimeConfiguration": {
                                                    "contentTransfer": {
                                                        "transferMode": "Chunked"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "endsWith": [
                                                    "@items('For_each_File')?['Path']",
                                                    ".xml"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "List_blobs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_courtId": {
                            "runAfter": {
                                "Initialize_sessionReference": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "courtId",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_courtRoomId": {
                            "runAfter": {
                                "Initialize_courtId": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "courtRoomId",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_johIdEmail": {
                            "runAfter": {
                                "Initialize_sessionDuration": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "johIdEmail",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_johIdIsPresiding": {
                            "runAfter": {
                                "Initialize_johIdSlot": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "johIdIsPresiding",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_johIdSlot": {
                            "runAfter": {
                                "Initialize_johIdEmail": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "johIdSlot",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonCourtLocatioinProfiles": {
                            "runAfter": {
                                "Initialize_jsonJudges": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonCLProfiles",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonJudges": {
                            "runAfter": {
                                "Initialize_jsonLocations": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonJudges",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonLocations": {
                            "runAfter": {
                                "Initialize_jsonVenues": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonLocations",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonMagistrates": {
                            "runAfter": {
                                "Initialize_jsonSchedules": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonMagistrates",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonPayload": {
                            "runAfter": {
                                "Initialize_xmlPayload": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonPayload",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonSchedules": {
                            "runAfter": {
                                "Initialize_jsonString": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonSchedules",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonString": {
                            "runAfter": {
                                "Initialize_jsonPayload": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonString",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonVenues": {
                            "runAfter": {
                                "Initialize_jsonMagistrates": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonVenues",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_magistrates": {
                            "runAfter": {
                                "Initialize_jsonCourtLocatioinProfiles": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "magistrates",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_sessionDuration": {
                            "runAfter": {
                                "Initialize_sessionStart": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "sessionDuration",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_sessionReference": {
                            "runAfter": {
                                "Initialize_magistrates": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "sessionReference",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_sessionStart": {
                            "runAfter": {
                                "Initialize_courtRoomId": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "sessionStart",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_xmlPayload": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "xmlPayload",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "List_blobs": {
                            "runAfter": {
                                "Create_read.me": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/default/foldersV2/@{encodeURIComponent(encodeURIComponent('/rota/input'))}",
                                "queries": {
                                    "nextPageMarker": "",
                                    "useFlatListing": false
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/azureblob')]",
                                "connectionName": "azureblob",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "keyvault": {
                                "connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/keyvault')]",
                                "connectionName": "keyvault",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}