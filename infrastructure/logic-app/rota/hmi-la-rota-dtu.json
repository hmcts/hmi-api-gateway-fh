{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workflows_hmidturota_name": {
            "defaultValue": "hmidturotadevla",
            "type": "String"
        },
        "storageAccountName": {
            "type": "string"
        },
        "storageAccessKey": {
            "type": "securestring"
        },
        "environmentName": {
            "type": "string"
        },
         "appId": {
            "type": "securestring"
        }, 
        "appSecret": {
            "type": "securestring"
        }, 
        "tenantId": {
            "type": "securestring"
        }, 
        "keyvaultName": {
            "type": "string"
        },
        "hmiSchedulesUrl": {
            "type": "string"
        },
        "serviceNowHostUrl": {
            "type": "string"
        },
        "hmiScopeUrl": {
            "type": "string"
        },
        "serviceNowAssignemntGroupId": {
            "type": "string"
        },
        "serviceNowUserRoleTypeId": {
            "type": "string"
        },
        "serviceNowServiceOfferingId": {
            "type": "string"
        },
        "serviceNowCallerId": {
            "type": "string"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "location": "[resourceGroup().location]",
            "name": "azureblob",
            "properties": {
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                },
                "displayName": "HMI DTU Rota",
                "parameterValues": {
                    "accountName": "[parameters('storageAccountName')]",
                    "accessKey": "[parameters('storageAccessKey')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "keyvault",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "HMI Key Vault",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                },
                "parameterValues": {
                    "token:clientId": "[parameters('appId')]",
                    "token:clientSecret": "[parameters('appSecret')]",
                    "token:TenantId": "[parameters('tenantId')]",
                    "token:grantType": "client_credentials",
                    "vaultName": "[parameters('keyvaultName')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('workflows_hmidturota_name')]",
            "location": "uksouth",
            "tags": {
                "environment": "[parameters('environmentName')]",
                "application": "hearing-management-interface",
                "businessarea": "cross-cutting"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', 'azureblob')]",
                "[resourceId('Microsoft.Web/connections', 'keyvault')]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 5
                            },
                            "type": "Recurrence"
                        }
                    },
                   "actions": {
                        "Create_read.me": {
                            "runAfter": {
                                "Initialize_xmlMagistrate": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@concat('Rota files to be processed')",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/files",
                                "queries": {
                                    "folderPath": "/rota/input",
                                    "name": "read.me",
                                    "queryParametersSingleEncoded": true
                                }
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "For_each": {
                            "foreach": "@body('List_blobs')?['value']",
                            "actions": {
                                "Get_blob_content_using_path": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/datasets/default/GetFileContentByPath",
                                        "queries": {
                                            "inferContentType": true,
                                            "path": "@items('For_each')?['Path']",
                                            "queryParametersSingleEncoded": true
                                        }
                                    }
                                },
                                "is_file_xml": {
                                    "actions": {
                                        "Blob_Meta": {
                                            "runAfter": {
                                                "Create_file_in_output_folder": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(body('Create_file_in_output_folder')?['Path']))}"
                                            }
                                        },
                                        "Condition": {
                                            "actions": {
                                                "Create_blob_in_output_folder": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "@body('Get_blob_content_using_path')",
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/datasets/default/files",
                                                        "queries": {
                                                            "folderPath": "/rota/output/",
                                                            "name": "@items('For_each')?['Name']",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    },
                                                    "runtimeConfiguration": {
                                                        "contentTransfer": {
                                                            "transferMode": "Chunked"
                                                        }
                                                    }
                                                },
                                                "Delete_current_blob": {
                                                    "runAfter": {
                                                        "Create_blob_in_output_folder": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                            }
                                                        },
                                                        "method": "delete",
                                                        "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(items('For_each')?['Path']))}"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "HTTP": [
                                                    "Failed",
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Condition_2": {
                                                        "actions": {
                                                            "Create_blob_in_error_folder": {
                                                                "runAfter": {
                                                                    "HTTP_3": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "body": "@body('Get_blob_content_using_path')",
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "post",
                                                                    "path": "/datasets/default/files",
                                                                    "queries": {
                                                                        "folderPath": "/rota/error/",
                                                                        "name": "@items('For_each')?['Name']",
                                                                        "queryParametersSingleEncoded": true
                                                                    }
                                                                },
                                                                "runtimeConfiguration": {
                                                                    "contentTransfer": {
                                                                        "transferMode": "Chunked"
                                                                    }
                                                                }
                                                            },
                                                            "Delete_blob_2": {
                                                                "runAfter": {
                                                                    "Create_blob_in_error_folder": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "delete",
                                                                    "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(items('For_each')?['Path']))}"
                                                                }
                                                            },
                                                            "Get_SN_User_ID": {
                                                                "runAfter": {},
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "get",
                                                                    "path": "/secrets/@{encodeURIComponent('hmi-servicenow-client')}/value"
                                                                }
                                                            },
                                                            "Get_SN_User_Pwd": {
                                                                "runAfter": {
                                                                    "Get_SN_User_ID": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "get",
                                                                    "path": "/secrets/@{encodeURIComponent('hmi-servicenow-secret')}/value"
                                                                }
                                                            },
                                                            "HTTP_3": {
                                                                "runAfter": {
                                                                    "Get_SN_User_Pwd": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "Http",
                                                                "inputs": {
                                                                    "authentication": {
                                                                        "password": "@body('Get_SN_User_Pwd')?['value']",
                                                                        "type": "Basic",
                                                                        "username": "@body('Get_SN_User_ID')?['value']"
                                                                    },
                                                                    "body": {
                                                                        "assignment_group": "[parameters('serviceNowAssignemntGroupId')]",
                                                                        "caller_id": "[parameters('serviceNowCallerId')]",
                                                                        "category": "Data Issue",
                                                                        "contact_type": "Alert",
                                                                        "description": "@{body('HTTP')}",
                                                                        "impact": "2",
                                                                        "service_offering": "[parameters('serviceNowServiceOfferingId')]",
                                                                        "short_description": "HMI Rota File Error @{items('For_each')?['Path']}",
                                                                        "subcategory": "Data or File Error - other",
                                                                        "u_role_type": "[parameters('serviceNowUserRoleTypeId')]",
                                                                        "urgency": "3"
                                                                    },
                                                                    "method": "POST",
                                                                    "uri": "[parameters('serviceNowHostUrl')]"
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "expression": {
                                                            "or": [
                                                                {
                                                                    "greaterOrEquals": [
                                                                        "@outputs('HTTP')['statusCode']",
                                                                        500
                                                                    ]
                                                                },
                                                                {
                                                                    "equals": [
                                                                        "@outputs('HTTP')['statusCode']",
                                                                        400
                                                                    ]
                                                                },
                                                                {
                                                                    "equals": [
                                                                        "@outputs('HTTP')['statusCode']",
                                                                        406
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@outputs('HTTP')['statusCode']",
                                                            201
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Create_file_in_output_folder": {
                                            "runAfter": {
                                                "Set_jsonPayload": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@body('Get_blob_content_using_path')",
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/datasets/default/files",
                                                "queries": {
                                                    "folderPath": "/rota/output",
                                                    "name": "@items('For_each')?['Name']",
                                                    "queryParametersSingleEncoded": true
                                                }
                                            },
                                            "runtimeConfiguration": {
                                                "contentTransfer": {
                                                    "transferMode": "Chunked"
                                                }
                                            }
                                        },
                                        "Create_invalid_file_in_error_folder": {
                                            "runAfter": {
                                                "Set_jsonPayload": [
                                                    "Failed"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@body('Get_blob_content_using_path')",
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/datasets/default/files",
                                                "queries": {
                                                    "folderPath": "/rota/error/",
                                                    "name": "@items('For_each')?['Name']",
                                                    "queryParametersSingleEncoded": true
                                                }
                                            },
                                            "runtimeConfiguration": {
                                                "contentTransfer": {
                                                    "transferMode": "Chunked"
                                                }
                                            }
                                        },
                                        "Create_payload_file": {
                                            "runAfter": {
                                                "Set_jsonString": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@variables('jsonString')",
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/datasets/default/files",
                                                "queries": {
                                                    "folderPath": "/rota/output/",
                                                    "name": "@{replace(actions('Blob_Meta').outputs.body.displayName, 'xml', 'json')}",
                                                    "queryParametersSingleEncoded": true
                                                }
                                            },
                                            "runtimeConfiguration": {
                                                "contentTransfer": {
                                                    "transferMode": "Chunked"
                                                }
                                            }
                                        },
                                        "Delete_invalid_file": {
                                            "runAfter": {
                                                "HTTP_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                    }
                                                },
                                                "method": "delete",
                                                "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(items('For_each')?['Path']))}"
                                            }
                                        },
                                        "Get_Client_ID": {
                                            "runAfter": {
                                                "Create_payload_file": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/secrets/@{encodeURIComponent('hmi-client-app-client')}/value"
                                            }
                                        },
                                        "Get_Client_Secret_": {
                                            "runAfter": {
                                                "Get_Client_ID": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/secrets/@{encodeURIComponent('hmi-client-app-secret')}/value"
                                            }
                                        },
                                        "Get_SN_Client_ID": {
                                            "runAfter": {
                                                "Create_invalid_file_in_error_folder": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/secrets/@{encodeURIComponent('hmi-servicenow-client')}/value"
                                            }
                                        },
                                        "Get_SN_Client_Secret": {
                                            "runAfter": {
                                                "Get_SN_Client_ID": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/secrets/@{encodeURIComponent('hmi-servicenow-secret')}/value"
                                            }
                                        },
                                        "HTTP": {
                                            "runAfter": {
                                                "Get_Client_Secret_": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "api://d49d7fa2-6904-4223-a907-3b8992af4190",
                                                    "clientId": "@body('Get_Client_ID')?['value']",
                                                    "secret": "@body('Get_Client_Secret_')?['value']",
                                                    "tenant": "531ff96d-0ae9-462a-8d2d-bec7c0b42082",
                                                    "type": "ActiveDirectoryOAuth"
                                                },
                                                "body": "@variables('jsonString')",
                                                "headers": {
                                                    "Accept": "application/json",
                                                    "Content-Type": "application/json",
                                                    "Destination-System": "MOCK",
                                                    "Request-Created-At": "@{utcNow('yyyy-MM-ddTHH:mm:ssZ')}",
                                                    "Source-System": "CFT"
                                                },
                                                "method": "POST",
                                                "uri": "[parameters('hmiSchedulesUrl')]"
                                            }
                                        },
                                        "HTTP_2": {
                                            "runAfter": {
                                                "Get_SN_Client_Secret": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "authentication": {
                                                    "password": "@body('Get_SN_Client_Secret')?['value']",
                                                    "type": "Basic",
                                                    "username": "@body('Get_SN_Client_ID')?['value']"
                                                },
                                                "body": {
                                                    "assignment_group": "[parameters('serviceNowAssignemntGroupId')]",
                                                    "caller_id": "[parameters('serviceNowCallerId')]",
                                                    "category": "Data Issue",
                                                    "contact_type": "Alert",
                                                    "description": "@{actions('Set_jsonPayload')['error']}",
                                                    "impact": "2",
                                                    "service_offering": "[parameters('serviceNowServiceOfferingId')]",
                                                    "short_description": "HMI Rota File Error @{items('For_each')?['Path']}",
                                                    "subcategory": "Data or File Error - other",
                                                    "u_role_type": "[parameters('serviceNowUserRoleTypeId')]",
                                                    "urgency": "3"
                                                },
                                                "method": "POST",
                                                "uri": "[parameters('serviceNowHostUrl')]"
                                            }
                                        },
                                        "Parse_JSON": {
                                            "runAfter": {
                                                "Set_jsonSchedules": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@variables('jsonSchedules')",
                                                "schema": {
                                                    "properties": {
                                                        "schedules": {
                                                            "properties": {
                                                                "schedule": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "@@id": {
                                                                                "type": "string"
                                                                            },
                                                                            "courtListingProfile": {
                                                                                "properties": {
                                                                                    "@@idref": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "justice": {
                                                                                "properties": {
                                                                                    "@@idref": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "slot": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "@@id",
                                                                            "courtListingProfile",
                                                                            "justice",
                                                                            "slot"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Process_Schedules": {
                                            "foreach": "@body('Parse_JSON')?['schedules']?['schedule']",
                                            "actions": {},
                                            "runAfter": {
                                                "Parse_JSON": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "Set_jsonPayload": {
                                            "runAfter": {
                                                "Process_Schedules": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "jsonPayload",
                                                "value": "@{json(xml(variables('xmlPayload')))}"
                                            }
                                        },
                                        "Set_jsonSchedules": {
                                            "runAfter": {
                                                "Set_xmlSchedules": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "jsonSchedules",
                                                "value": "@{json(xml(substring(variables('xmlSchedules'),0,sub(length(variables('xmlSchedules')), 16))))}"
                                            }
                                        },
                                        "Set_jsonString": {
                                            "runAfter": {
                                                "Blob_Meta": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "jsonString",
                                                "value": "@{replace(variables('jsonPayload'), '@id', '_id')}"
                                            }
                                        },
                                        "Set_xmlPayload": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "xmlPayload",
                                                "value": "@{body('Get_blob_content_using_path')}"
                                            }
                                        },
                                        "Set_xmlSchedules": {
                                            "runAfter": {
                                                "Set_xmlPayload": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "xmlSchedules",
                                                "value": "@{substring(variables('xmlPayload'), indexOf(variables('xmlPayload'), '<schedules>'), sub(length(variables('xmlPayload')),indexOf(variables('xmlPayload'), '<schedules>')))}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Get_blob_content_using_path": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Create_File_in_Error_Folder": {
                                                "runAfter": {},
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "@body('Get_blob_content_using_path')",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/datasets/default/files",
                                                    "queries": {
                                                        "folderPath": "/rota/error/",
                                                        "name": "@items('For_each')?['Name']",
                                                        "queryParametersSingleEncoded": true
                                                    }
                                                },
                                                "runtimeConfiguration": {
                                                    "contentTransfer": {
                                                        "transferMode": "Chunked"
                                                    }
                                                }
                                            },
                                            "Delete_blob": {
                                                "runAfter": {
                                                    "Create_File_in_Error_Folder": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "delete",
                                                    "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(items('For_each')?['Path']))}"
                                                }
                                            },
                                            "Update_read.me": {
                                                "runAfter": {
                                                    "Delete_blob": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "@concat('Rota files to be processed')",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/datasets/default/files",
                                                    "queries": {
                                                        "folderPath": "/rota/input",
                                                        "name": "read.me",
                                                        "queryParametersSingleEncoded": true
                                                    }
                                                },
                                                "runtimeConfiguration": {
                                                    "contentTransfer": {
                                                        "transferMode": "Chunked"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "endsWith": [
                                                    "@items('For_each')?['Path']",
                                                    ".xml"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "List_blobs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_jsonPayload": {
                            "runAfter": {
                                "Initialize_xmlPayload": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonPayload",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonSchedules": {
                            "runAfter": {
                                "Initialize_xmlSchedules": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonSchedules",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_jsonString": {
                            "runAfter": {
                                "Initialize_jsonPayload": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "jsonString",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_xmlCourtListingProfile": {
                            "runAfter": {
                                "Initialize_jsonSchedules": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "xmlCLProfile",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_xmlMagistrate": {
                            "runAfter": {
                                "Initialize_xmlCourtListingProfile": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "xmlMagistrate",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_xmlPayload": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "xmlPayload",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_xmlSchedules": {
                            "runAfter": {
                                "Initialize_jsonString": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "xmlSchedules",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "List_blobs": {
                            "runAfter": {
                                "Create_read.me": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/default/foldersV2/@{encodeURIComponent(encodeURIComponent('/rota/input'))}",
                                "queries": {
                                    "nextPageMarker": "",
                                    "useFlatListing": false
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/azureblob')]",
                                "connectionName": "azureblob",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "keyvault": {
                                "connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/keyvault')]",
                                "connectionName": "keyvault",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}