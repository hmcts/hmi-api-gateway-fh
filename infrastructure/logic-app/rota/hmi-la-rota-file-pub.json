{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workflows_hmirotafilepub_name": {
            "defaultValue": "hmidturotafilepubdevla",
            "type": "String"
        },
        "storageAccountName": {
            "type": "string"
        },
        "storageAccessKey": {
            "type": "securestring"
        },
        "storageACPathFiles": {
            "type": "string"
        },
        "storageACGetPath": {
            "type": "string"
        },
        "storageACExistingMagistrtePath": {
            "type": "string"
        },
        "storageACExistingSchedulesPath": {
            "type": "string"
        },
        "storageACExistingCLPPath": {
            "type": "string"
        },
        "storageACGetPathSuffix": {
            "type": "string"
        },
        "environmentName": {
            "type": "string"
        },
        "hmiDestination": {
            "type": "string"
        },
         "appId": {
            "type": "securestring"
        }, 
        "appSecret": {
            "type": "securestring"
        }, 
        "tenantId": {
            "type": "securestring"
        }, 
        "keyvaultName": {
            "type": "string"
        },
        "hmiRotaFileUrl": {
            "type": "string"
        },
        "serviceNowHostUrl": {
            "type": "string"
        },
        "hmiScopeUrl": {
            "type": "string"
        },
        "serviceNowAssignemntGroupId": {
            "type": "string"
        },
        "serviceNowUserRoleTypeId": {
            "type": "string"
        },
        "serviceNowServiceOfferingId": {
            "type": "string"
        },
        "serviceNowCallerId": {
            "type": "string"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "environment": "[parameters('environmentName')]",
                "application": "hearing-management-interface",
                "businessarea": "cross-cutting",
                "builtFrom": "hmcts/hmi-api-gateway-fh"
            },
            "name": "azureblob",
            "tags": {
                "environment": "[parameters('environmentName')]",
                "application": "hearings-management-interface",
                "businessarea": "cross-cutting",
				"builtFrom": "hmcts/hmi-api-gateway-fh"
            },
            "properties": {
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                },
                "displayName": "HMI DTU Rota",
                "parameterValues": {
                    "accountName": "[parameters('storageAccountName')]",
                    "accessKey": "[parameters('storageAccessKey')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "keyvault",
            "location": "[resourceGroup().location]",
            "tags": {
                "environment": "[parameters('environmentName')]",
                "application": "hearings-management-interface",
                "businessarea": "cross-cutting",
				"builtFrom": "hmcts/hmi-api-gateway-fh"
            },
            "properties": {
                "displayName": "HMI Key Vault",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                },
                "parameterValues": {
                    "token:clientId": "[parameters('appId')]",
                    "token:clientSecret": "[parameters('appSecret')]",
                    "token:TenantId": "[parameters('tenantId')]",
                    "token:grantType": "client_credentials",
                    "vaultName": "[parameters('keyvaultName')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "azuretables",
            "location": "[resourceGroup().location]",
            "tags": {
                "environment": "[parameters('environmentName')]",
                "application": "hearing-management-interface",
                "businessarea": "cross-cutting",
                "builtFrom": "hmcts/hmi-api-gateway-fh"
            },
            "kind": "V1",
            "tags": {
                "environment": "[parameters('environmentName')]",
                "application": "hearings-management-interface",
                "businessarea": "cross-cutting",
				"builtFrom": "hmcts/hmi-api-gateway-fh"
            },
            "properties": {
                "displayName": "HMI DTU Rota",
                "statuses": [
                    {
                        "status": "Connected"
                    }
                ],
                "customParameterValues": {},
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuretables')]"
                },
                "parameterValues": {
                    "storageaccount": "[parameters('storageAccountName')]",
                    "sharedKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').keys[0].value]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('workflows_hmirotafilepub_name')]",
            "location": "uksouth",
            "tags": {
                "environment": "[parameters('environmentName')]",
                "application": "hearings-management-interface",
                "businessarea": "cross-cutting",
				"builtFrom": "hmcts/hmi-api-gateway-fh"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', 'azureblob')]",
                "[resourceId('Microsoft.Web/connections', 'azuretables')]",
                "[resourceId('Microsoft.Web/connections', 'keyvault')]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 10
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Minute",
                                "interval": 10
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Create_read.me": {
                            "runAfter": {
                                "Initialize_newFilesToSend_": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@concat('Rota files to be placed here')",
                                "headers": {
                                    "ReadFileMetadataFromServer": true
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files",
                                "queries": {
                                    "folderPath": "/rota/input/",
                                    "name": "read.me",
                                    "queryParametersSingleEncoded": true
                                }
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "For_each_File": {
                            "foreach": "@body('List_blobs')?['value']",
                            "actions": {
                                "Get_blob_content_using_path": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/datasets/default/GetFileContentByPath",
                                        "queries": {
                                            "inferContentType": true,
                                            "path": "@items('For_each_File')?['Path']",
                                            "queryParametersSingleEncoded": true
                                        }
                                    }
                                },
                                "is_file_xml": {
                                    "actions": {
                                        "Condition": {
                                            "actions": {
                                                "HTTP": {
                                                    "runAfter": {},
                                                    "type": "Http",
                                                    "inputs": {
                                                        "body": {
                                                            "filename": "@{items('For_each_File')?['Name']}"
                                                        },
                                                        "method": "POST",
                                                        "uri": "https://prod-03.uksouth.logic.azure.com:443/workflows/1841ef5046ee439a87f4a84f09e9adfb/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=2DidaEFB5Oe-mmfy18G0-VsEdbEd4Dqc39y6MAKIPxI"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Insert_or_Merge_Entity_new": [
                                                    "Succeeded",
                                                    "Skipped"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@body('Get_entity')?['status']",
                                                            "TEST"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Get_entity": {
                                            "runAfter": {
                                                "Insert_or_Merge_Entity_error": [
                                                    "Skipped"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/Tables/@{encodeURIComponent('rotaFiles')}/entities(PartitionKey='@{encodeURIComponent(items('For_each_File')?['Name'])}',RowKey='@{encodeURIComponent(items('For_each_File')?['Name'])}')"
                                            }
                                        },
                                        "Insert_or_Merge_Entity_error": {
                                            "runAfter": {
                                                "Parse_JSON": [
                                                    "Failed"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "status": "ERROR"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                                                    }
                                                },
                                                "method": "patch",
                                                "path": "/Tables/@{encodeURIComponent('rotaFiles')}/entities(PartitionKey='@{encodeURIComponent(items('For_each_File')?['Name'])}',RowKey='@{encodeURIComponent(items('For_each_File')?['Name'])}')"
                                            }
                                        },
                                        "Insert_or_Merge_Entity_new": {
                                            "runAfter": {
                                                "Get_entity": [
                                                    "Failed"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "status": "NEW"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                                                    }
                                                },
                                                "method": "patch",
                                                "path": "/Tables/@{encodeURIComponent('rotaFiles')}/entities(PartitionKey='@{encodeURIComponent(items('For_each_File')?['Name'])}',RowKey='@{encodeURIComponent(items('For_each_File')?['Name'])}')"
                                            }
                                        },
                                        "Parse_JSON": {
                                            "runAfter": {
                                                "Set_xmlPayload": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@json(xml(variables('xmlPayload')))",
                                                "schema": {
                                                    "properties": {
                                                        "?xml": {
                                                            "properties": {
                                                                "@@encoding": {
                                                                    "type": "string"
                                                                },
                                                                "@@standalone": {
                                                                    "type": "string"
                                                                },
                                                                "@@version": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "rotaSchedule": {
                                                            "properties": {
                                                                "@@xmlns": {
                                                                    "type": "string"
                                                                },
                                                                "courtListingProfiles": {
                                                                    "properties": {
                                                                        "courtListingProfile": {
                                                                            "items": {
                                                                                "properties": {
                                                                                    "@@id": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "@@linkedSessionId": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "business": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "locationId": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "panel": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "session": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "sessionDate": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "updatedDate": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "venueId": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "welshSpeaking": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "@@id",
                                                                                    "sessionDate",
                                                                                    "session",
                                                                                    "panel",
                                                                                    "business",
                                                                                    "venueId",
                                                                                    "locationId",
                                                                                    "welshSpeaking",
                                                                                    "updatedDate"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "locations": {
                                                                    "properties": {
                                                                        "location": {
                                                                            "items": {
                                                                                "properties": {
                                                                                    "locationId": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "locationId",
                                                                                    "name"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "magistrates": {
                                                                    "properties": {
                                                                        "magistrate": {
                                                                            "items": {
                                                                                "properties": {
                                                                                    "@@id": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "emailAddress": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "forenames": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "surname": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "title": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "@@id",
                                                                                    "title",
                                                                                    "surname",
                                                                                    "forenames",
                                                                                    "emailAddress"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "rotaPeriod": {
                                                                    "properties": {
                                                                        "endDate": {
                                                                            "type": "string"
                                                                        },
                                                                        "justiceAreaName": {
                                                                            "type": "string"
                                                                        },
                                                                        "justiceAreaType": {
                                                                            "type": "string"
                                                                        },
                                                                        "startDate": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "schedules": {
                                                                    "properties": {
                                                                        "schedule": {
                                                                            "items": {
                                                                                "properties": {
                                                                                    "@@id": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "courtListingProfile": {
                                                                                        "properties": {
                                                                                            "@@idref": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "justice": {
                                                                                        "properties": {
                                                                                            "@@idref": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "slot": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "@@id",
                                                                                    "courtListingProfile",
                                                                                    "justice",
                                                                                    "slot"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "venues": {
                                                                    "properties": {
                                                                        "venue": {
                                                                            "items": {
                                                                                "properties": {
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "venueId": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "venueId",
                                                                                    "name"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Set_xmlPayload": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "xmlPayload",
                                                "value": "@{body('Get_blob_content_using_path')}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Get_blob_content_using_path": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Create_File_in_Error_Folder": {
                                                "runAfter": {},
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "@body('Get_blob_content_using_path')",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/datasets/default/files",
                                                    "queries": {
                                                        "folderPath": "/rota/error/",
                                                        "name": "@items('For_each_File')?['Name']",
                                                        "queryParametersSingleEncoded": true
                                                    }
                                                },
                                                "runtimeConfiguration": {
                                                    "contentTransfer": {
                                                        "transferMode": "Chunked"
                                                    }
                                                }
                                            },
                                            "Delete_blob": {
                                                "runAfter": {
                                                    "Create_File_in_Error_Folder": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "delete",
                                                    "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(items('For_each_File')?['Path']))}"
                                                }
                                            },
                                            "Update_read.me": {
                                                "runAfter": {
                                                    "Delete_blob": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "@concat('Rota files to be processed')",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/datasets/default/files",
                                                    "queries": {
                                                        "folderPath": "/rota/input",
                                                        "name": "read.me",
                                                        "queryParametersSingleEncoded": true
                                                    }
                                                },
                                                "runtimeConfiguration": {
                                                    "contentTransfer": {
                                                        "transferMode": "Chunked"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "endsWith": [
                                                    "@items('For_each_File')?['Path']",
                                                    ".xml"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "List_blobs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Get_entities_with_status_loading": {
                            "runAfter": {
                                "For_each_File": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/Tables/@{encodeURIComponent('rotaFiles')}/entities",
                                "queries": {
                                    "$filter": "status eq 'LOADING'"
                                }
                            }
                        },
                        "Initialize_loadingCount": {
                            "runAfter": {
                                "Initialize_xmlPayload": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "loadingCount",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_loadingSpareCount": {
                            "runAfter": {
                                "Initialize_loadingCount": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "loadingSpareCount",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_newFilesToSend_": {
                            "runAfter": {
                                "Initialize_loadingSpareCount": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "newFilesToSend",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_xmlPayload": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "xmlPayload",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Is_loadingCount_below_limit": {
                            "actions": {
                                "For_each_file_to_load": {
                                    "foreach": "@variables('newFilesToSend')",
                                    "actions": {
                                        "HTTP_Session_Enricher": {
                                            "runAfter": {
                                                "Parse_new_record_to_load": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "body": {
                                                    "filename": "@{body('Parse_new_record_to_load')?['RowKey']}"
                                                },
                                                "method": "POST",
                                                "uri": "https://prod-03.uksouth.logic.azure.com:443/workflows/1841ef5046ee439a87f4a84f09e9adfb/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=2DidaEFB5Oe-mmfy18G0-VsEdbEd4Dqc39y6MAKIPxI"
                                            }
                                        },
                                        "Parse_new_record_to_load": {
                                            "runAfter": {},
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@items('For_each_file_to_load')",
                                                "schema": {
                                                    "properties": {
                                                        "PartitionKey": {
                                                            "type": "string"
                                                        },
                                                        "RowKey": {
                                                            "type": "string"
                                                        },
                                                        "Timestamp": {
                                                            "type": "string"
                                                        },
                                                        "odata.etag": {
                                                            "type": "string"
                                                        },
                                                        "status": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_newFilesToSend": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "Get_entities_new": {
                                    "runAfter": {
                                        "Set_loadingSpareCount": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuretables']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/Tables/@{encodeURIComponent('rotaFiles')}/entities",
                                        "queries": {
                                            "$filter": "status eq 'NEW'"
                                        }
                                    }
                                },
                                "Set_loadingSpareCount": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "loadingSpareCount",
                                        "value": "@sub(10, variables('loadingCount'))"
                                    }
                                },
                                "Set_newFilesToSend": {
                                    "runAfter": {
                                        "Get_entities_new": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "newFilesToSend",
                                        "value": "@take(body('Get_entities_new')?['value'], variables('loadingSpareCount'))"
                                    }
                                }
                            },
                            "runAfter": {
                                "Set_variable_loadingCount": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "less": [
                                            "@variables('loadingCount')",
                                            10
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "List_blobs": {
                            "runAfter": {
                                "Create_read.me": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/default/foldersV2/@{encodeURIComponent(encodeURIComponent('/rota/input'))}",
                                "queries": {
                                    "nextPageMarker": "",
                                    "useFlatListing": false
                                }
                            }
                        },
                        "Set_variable_loadingCount": {
                            "runAfter": {
                                "Get_entities_with_status_loading": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "loadingCount",
                                "value": "@length(body('Get_entities_with_status_loading')?['value'])"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/azureblob')]",
                                "connectionName": "azureblob",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "azuretables": {
                                "connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/azuretables')]",
                                "connectionName": "azuretables",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuretables')]"
                            },
                            "keyvault": {
                                "connectionId": "[concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/keyvault')]",
                                "connectionName": "keyvault",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}
