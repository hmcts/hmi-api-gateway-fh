<policies>
    <inbound>
        <base />
        <choose>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "EMULATOR")">
				<rewrite-uri template="/retrieve-schedule" copy-unmatched-params="true" />
				<set-backend-service base-url="http://#{emulatorHost}#/schedules/" />
			</when>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "SNL")">
				<cache-lookup-value key="snlAuth" variable-name="snlAuthToken" />
                <choose>
                    <!--when condition="@(context.Variables.GetValueOrDefault("snlAuthToken","") == "")">
                        <send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
                            <set-url>#{sAndLOauthUrl}#</set-url>
                            <set-method>POST</set-method>
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/x-www-form-urlencoded</value>
                            </set-header>
                            <set-body>@{
                                return "username=#{sAndLAuthClient}#&password=#{sAndLAuthSecret}#&grant_type=password_credentials";}</set-body>
                        </send-request>
                        <cache-store-value key="snlAuth" value="@("Bearer " + (String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["idToken"])" duration="2700" />
                    </when-->
                    <when condition="@(context.Variables.GetValueOrDefault("snlAuthToken","") == "")">
                        <send-request ignore-error="false" timeout="20" response-variable-name="snlClientResponse" mode="new">
                            <set-url>https://#{keyVaultHost}#/secrets/snl-client-app-client/?api-version=7.0</set-url>
                            <set-method>GET</set-method>
                            <authentication-managed-identity resource="https://vault.azure.net" />
                        </send-request>
                        <set-variable name="snlClient" value="@{
                                                                  var secret = ((IResponse)context.Variables["snlClientResponse"]).Body.As<JObject>();
                                                                  return secret["value"].ToString();
                                                              }" />
                        <send-request ignore-error="false" timeout="20" response-variable-name="snlSecretResponse" mode="new">
                            <set-url>https://#{keyVaultHost}#/secrets/snl-client-app-secret/?api-version=7.0</set-url>
                            <set-method>GET</set-method>
                            <authentication-managed-identity resource="https://vault.azure.net" />
                        </send-request>
                        <set-variable name="snlSecret" value="@{
                                                                  var secret = ((IResponse)context.Variables["snlSecretResponse"]).Body.As<JObject>();
                                                                  return secret["value"].ToString();
                                                              }" />
                        <send-request ignore-error="true" timeout="20" response-variable-name="snlBearerToken" mode="new">
                            <set-url>#{sAndLOauthUrl}#</set-url>
                            <set-method>POST</set-method>
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/x-www-form-urlencoded</value>
                            </set-header>
                            <set-body>@{
                                return "username=" + (string)context.Variables["snlClient"] + "&password=" + (string)context.Variables["snlSecret"] + "&grant_type=password_credentials";}</set-body>
                        </send-request>
                        <cache-store-value key="snlAuth" value="@("Bearer " + (String)((IResponse)context.Variables["snlBearerToken"]).Body.As<JObject>()["access_token"])" duration="2700" />
                        <cache-lookup-value key="snlAuth" variable-name="snlAuthToken" />
                    </when>
                </choose>
                <set-header name="Authorization" exists-action="override">
                    <value>@((String)context.Variables["snlAuthToken"])</value>
                </set-header>
                <rewrite-uri template="/" copy-unmatched-params="true" />
                <set-header name="Content-Type" exists-action="override">
                    <value>application/json; charset=utf-8</value>
                </set-header>
                <set-header name="Request-Type" exists-action="override">	
                    <value>text</value>
                </set-header>
                <set-header name="Subscription-Key" exists-action="override">
                    <value>@(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key","unknown"))</value>
                </set-header>
                <!--  Don't expose APIM subscription key to the backend. -->
                <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
                <set-backend-service base-url="https://#{sAndLHost}#/rest/hmcts/resources/assignJohs" />
			</when>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "CFT")">
				<rewrite-uri template="/retrieve-schedule" copy-unmatched-params="true" />
				<set-backend-service base-url="http://#{emulatorHost}#/schedules/" />
			</when>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "CRIME")">
				<rewrite-uri template="/retrieve-schedule" copy-unmatched-params="true" />
				<set-backend-service base-url="http://#{emulatorHost}#/schedules/" />
			</when>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "MOCK")">
				<mock-response status-code="201" content-type="application/json" />		
        	</when>
		</choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>