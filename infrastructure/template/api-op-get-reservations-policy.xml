<policies>
    <inbound>
        <base />
            <choose>
                <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "EMULATOR")">
                    <rewrite-uri template="/{hearing-id}" copy-unmatched-params="true" />
                    <set-backend-service base-url="http://#{emulatorHost}#/hearings/retrieve-hearing/" />
                </when>
                <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "CFT")">
                    <rewrite-uri template="/{hearing-id}" copy-unmatched-params="true" />
                    <set-backend-service base-url="http://#{emulatorHost}#/hearings/retrieve-hearing/" />
                </when>
                <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "SNL")">
                    <choose>
                        <when condition="@(context.Variables.GetValueOrDefault("snlAuthToken","") == "")">
                            <send-request ignore-error="false" timeout="20" response-variable-name="snlClientResponse" mode="new">
                                <set-url>https://#{keyVaultHost}#/secrets/snl-user-id/?api-version=7.0</set-url>
                                <set-method>GET</set-method>
                                <authentication-managed-identity resource="https://vault.azure.net" />
                            </send-request>
                            <set-variable name="snlClient" value="@{
                                var secret = ((IResponse)context.Variables["snlClientResponse"]).Body.As<JObject>();
                                return secret["value"].ToString();
                            }" />
                            <send-request ignore-error="false" timeout="20" response-variable-name="snlSecretResponse" mode="new">
                                <set-url>https://#{keyVaultHost}#/secrets/snl-user-pwd/?api-version=7.0</set-url>
                                <set-method>GET</set-method>
                                <authentication-managed-identity resource="https://vault.azure.net" />
                            </send-request>
                            <set-variable name="snlSecret" value="@{
                                var secret = ((IResponse)context.Variables["snlSecretResponse"]).Body.As<JObject>();
                                return secret["value"].ToString();
                            }" />
                            <send-request ignore-error="true" timeout="20" response-variable-name="snlBearerToken" mode="new">
                                <set-url>https://login.microsoftonline.com/fb6e0e22-0da3-4c35-972a-9d61eb256508/oauth2/token</set-url>
                                <set-method>POST</set-method>
                                <set-header name="Content-Type" exists-action="override">
                                    <value>application/x-www-form-urlencoded</value>
                                </set-header>
                                <set-body>@{
                                    return "username=" + (string)context.Variables["snlClient"] + "&password=" + (string)context.Variables["snlSecret"] + "&grant_type=password_credentials";}</set-body>
                            </send-request>
                            <cache-store-value key="snlAuth" value="@("Bearer " + (String)((IResponse)context.Variables["snlBearerToken"]).Body.As<JObject>()["idToken"])" duration="2700" />
                            <cache-lookup-value key="snlAuth" variable-name="snlAuthToken" />
                        </when>
                    </choose>
                    <set-header name="Authorization" exists-action="override">
                        <value>@((String)context.Variables["snlAuthToken"])</value>
                    </set-header>
                    <rewrite-uri template="/" copy-unmatched-params="true" />
                    <set-backend-service base-url="https://#{sAndLHost}#/rest/hmcts/resources/reservations" />
                </when>
                <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "CRIME")">
                    <rewrite-uri template="/{hearing-id}" copy-unmatched-params="true" />
                    <set-backend-service base-url="http://#{emulatorHost}#/hearings/retrieve-hearing/" />
                </when>
                <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "MOCK")">
                    <set-backend-service base-url="https://www.hmcts.com/request-hearings/hearings/id" />
                    <mock-response status-code="200" content-type="application/json" />
                </when>
            </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>