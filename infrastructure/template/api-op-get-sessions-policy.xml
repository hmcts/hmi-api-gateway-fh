<policies>
    <inbound>
        <base />
        <set-variable name="mandatoryMissing" value="@{
                string[] qryPrmKeys = context.Request.Url.Query.Keys.ToArray();

                return !qryPrmKeys.Contains("requestSessionType");
            }" />
        <choose>
            <when condition="@((bool)context.Variables["mandatoryMissing"])">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                            new JProperty("statusCode", 400),
                            new JProperty("message", "You need to provide mandatory parameter: 'requestSessionType'")
                        ).ToString();
                        }</set-body>
                </return-response>
            </when>
        </choose>
        <set-variable name="invalidQueryParamMsg" value="@{
            string[] qryPrmKeys = context.Request.Url.Query.Keys.ToArray();
            string[] validQueryParams = new String[]{"requestSessionType", "requestStartDate", "requestEndDate", "requestJudgeType", "requestLocationId", "requestDuration"};

            foreach (string queryParam in qryPrmKeys)
            {
                if(!validQueryParams.Contains(queryParam)){
                    return "Unsupported Query Param detected: '" + queryParam + "'";
                }  
            }
            return null;
        }" />
        <choose>
            <when condition="@(context.Variables["invalidQueryParamMsg"] != null)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                            new JProperty("statusCode", 400),
                            new JProperty("message", context.Variables["invalidQueryParamMsg"])
                        ).ToString();
                        }</set-body>
                </return-response>
            </when>
        </choose>
        <choose>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "EMULATOR")">
                <rewrite-uri template="/" copy-unmatched-params="true" /> 
                <set-backend-service base-url="http://#{emulatorHost}#/rest/hmcts/resources/sessions" />
            </when>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "SNL")">
                <cache-lookup-value key="snlAuth" variable-name="snlAuthToken" />
                <choose>
                    <when condition="@(context.Variables.GetValueOrDefault("snlAuthToken","") == "")">
                        <send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
                            <set-url>#{sAndLOauthUrl}#</set-url>
                            <set-method>POST</set-method>
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/x-www-form-urlencoded</value>
                            </set-header>
                            <set-body>@{
                                return "username=#{sAndLAuthClient}#&password=#{sAndLAuthSecret}#&grant_type=password_credentials";}</set-body>
                        </send-request>
                        <cache-store-value key="snlAuth" value="@("Bearer " + (String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["idToken"])" duration="2700" />
                    </when>
                </choose>
                <set-header name="Authorization" exists-action="override">
                     <value>@((String)context.Variables["snlAuthToken"])</value>
                </set-header>
                <rewrite-uri template="/" copy-unmatched-params="true" />
                <set-header name="Content-Type" exists-action="override">
                    <value>application/json; charset=utf-8</value>
                </set-header>
                <set-header name="Request-Type" exists-action="override">
                    <value>text</value>
                </set-header>
                <set-header name="Subscription-Key" exists-action="override">
                    <value>@(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key","unknown"))</value>
                </set-header>
                <!--  Don't expose APIM subscription key to the backend. -->
                <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
                <set-backend-service base-url="https://#{sAndLHost}#/casehqapi/rest/hmcts/resources/sessions" />
            </when>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "MOCK")">
                <return-response>
                    <set-status code="200" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                            var data = new JArray();
                            JObject recordOne = new JObject(
                                new JProperty("sessionStartDate", "2018-01-29 20:36:01Z"),
                                new JProperty("sessionEndDate", "2018-01-29 20:36:01Z"),
                                new JProperty("caseCourt", "Milton Keynes"),
                                new JProperty("room-Name", "RM012"),
                                new JProperty("JoH", new JObject(
                                    new JProperty("PersonRoleID", "PR012"),
                                    new JProperty("PersonID", "P012"),
                                    new JProperty("PersonRole", "Judge"),
                                    new JProperty("personName", "Marcus Trescothic"),
                                    new JProperty("TicketName", "T123")
                                )),
                                new JProperty("SessionType", "DS"),
                                new JProperty("SessionIDCaseHQ", "SID012")
                            );
                            JObject recordTwo = new JObject(
                                new JProperty("sessionStartDate", "2018-01-29 10:36:01Z"),
                                new JProperty("sessionEndDate", "2018-01-29 12:36:01Z"),
                                new JProperty("caseCourt", "Oxford"),
                                new JProperty("room-Name", "RM012"),
                                new JProperty("JoH", new JObject(
                                    new JProperty("PersonRoleID", "PR012"),
                                    new JProperty("PersonID", "P012"),
                                    new JProperty("PersonRole", "Judge"),
                                    new JProperty("personName", "Donald Duck"),
                                    new JProperty("TicketName", "T123")
                                )),
                                new JProperty("SessionType", "DS"),
                                new JProperty("SessionIDCaseHQ", "SID015")
                            );
                            data.Add(recordOne);
                            data.Add(recordTwo);
                            return data.ToString();
                        }</set-body>
                </return-response>
            </when>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
         <choose>
            <when condition="@(context.Response.StatusCode == 401)">
                <cache-remove-value key="snlAuth" />
                <return-response>
						<set-status code="502" />
						<set-header name="Content-Type">
							<value>application/json</value>
						</set-header>
						<set-body>@{
						return new JObject(
							new JProperty("message", "Successfully autheticated by HMI, however target system failed to autheticate. Please try again.")
						    ).ToString();
						}
					</set-body>
				</return-response>
            </when>
             <when condition="@(context.Response.StatusCode == 403)">
                <cache-remove-value key="snlAuth" />
                <return-response>
						<set-status code="502" />
						<set-header name="Content-Type">
							<value>application/json</value>
						</set-header>
						<set-body>@{
						return new JObject(
							new JProperty("message", "Successfully authorized by HMI, however target system failed to authorize. Please try again.")
						    ).ToString();
						}
					</set-body>
				</return-response>
            </when>
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
