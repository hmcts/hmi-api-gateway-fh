<policies>
    <inbound>
        <base />
        <choose>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "HMI-DTU")">
				<set-header name="AUTHORIZATION" exists-action="delete" />
                <rewrite-uri template="/" copy-unmatched-params="true" />
				<set-query-parameter name="api-version" exists-action="skip">
					<value>2016-10-01</value>
				</set-query-parameter>
				<set-query-parameter name="sp" exists-action="skip">
					<value>%2Ftriggers%2Fmanual%2Frun</value>
				</set-query-parameter>
				<set-query-parameter name="sv" exists-action="skip">
					<value>1.0</value>
				</set-query-parameter>
				<set-query-parameter name="sig" exists-action="skip">
					<value>#{laHmiSittingPatternSig}#</value>
				</set-query-parameter>
                <set-backend-service base-url="https://#{laHmiSittingPatternHost}#/triggers/manual/paths/invoke" />
            </when>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "MOCK")">
                <return-response>
                    <set-status code="200" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
	                        var data = new JArray();
	                        JObject recordOne = new JObject(
	                            new JProperty("id", "4a62691e-cbf2-3c96-a880-08123c67a5e5"),
	                            new JProperty("oucode", "B01DU00"),
	                            new JProperty("courtroom_id", "702"),
	                            new JProperty("max_slot", "16"),
	                            new JProperty("max_duration_mins", ""),
	                            new JProperty("court_session", "THUAM"),
	                            new JProperty("rota_business_type_code", "TVLO")
	                        );
                            JObject recordTwo = new JObject(
	                            new JProperty("id", "dcecc67c-792a-3df8-acd0-8ecbb71f0f6e"),
	                            new JProperty("oucode", "B01DU00"),
	                            new JProperty("courtroom_id", "702"),
	                            new JProperty("max_slot", "6"),
	                            new JProperty("max_duration_mins", ""),
	                            new JProperty("court_session", "THUAM"),
	                            new JProperty("rota_business_type_code", "TVLO")
	                        );
                            JObject recordThree = new JObject(
	                            new JProperty("id", "dcecc67c-792a-3df8-acd0-8ecbb71f0f6e"),
	                            new JProperty("oucode", "B01MN00"),
	                            new JProperty("courtroom_id", "2478"),
	                            new JProperty("max_slot", "12"),
	                            new JProperty("max_duration_mins", ""),
	                            new JProperty("court_session", "TUEAM"),
	                            new JProperty("rota_business_type_code", "TVLO")
	                        );
	                        data.Add(recordOne);
	                        data.Add(recordTwo);
	                        data.Add(recordThree);
	                        return data.ToString();
	                    }</set-body>
                </return-response>
            </when>
			<otherwise>
                <return-response>
                    <set-status code="400" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                    return new JObject(
                    new JProperty("message", context.Request.Headers.GetValueOrDefault("Destination-System","") + " destination doesn't support this functionality")
                    ).ToString();
                    }</set-body>
                </return-response>
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
	<outbound>
	<base />
	<choose>
		<when condition="@(context.Response.StatusCode == 401)">

			<send-request ignore-error="true" timeout="20" response-variable-name="snowAuth" mode="new">
				<set-url>https://#{keyVaultHost}#/secrets/hmi-servicenow-auth?api-version=7.0</set-url>
				<set-method>GET</set-method>
				<authentication-managed-identity resource="https://vault.azure.net" />
			</send-request>
			<send-request ignore-error="false" timeout="20" response-variable-name="serviceNow" mode="new">
				<set-url>https://#{snowHost}#/api/now/table/incident?sysparm_fields=number</set-url>
				<set-method>POST</set-method>
				<set-header name="Authorization" exists-action="override">
					<value>
						@("Basic " + ((IResponse)context.Variables["snowAuth"]).Body.As
						<JObject>()["value"].ToString())
					</value>
				</set-header>
				<set-body>@{
					return new JObject(
					new JProperty("assignment_group", "56b756774fbd368057db0b318110c7bd"),
					new JProperty("caller_id", "1475a0491b743414f0dc85e4464bcb7a"),
					new JProperty("category", "Data Issue"),
					new JProperty("contact_type", "Alert"),
					new JProperty("description", "HMI - Get Sitting Patterns: " + context.Request.Headers.GetValueOrDefault("transactionIdHMCTS","")),
					new JProperty("impact", "2"),
					new JProperty("service_offering", "138e0c541bc5bc507bdaddf0b24bcb2a"),
					new JProperty("short_description", "HMI - API Gateway Error - Authentication Issue"),
					new JProperty("subcategory", "HMI - Backend Service Failure"),
					new JProperty("u_role_type", "c319bc4bdb41834074abffa9bf96199c"),
					new JProperty("urgency", "3")
					).ToString();
					}</set-body>
			</send-request>
			<return-response>
				<set-status code="502" />
				<set-header name="Content-Type">
					<value>application/json</value>
				</set-header>
				<set-body>@{
					return new JObject(
					new JProperty("message", "Successfully authenticated by HMI, however target system failed to authenticate. Please try again.")
					).ToString();
					}
				</set-body>
			</return-response>
		</when>
		<when condition="@(context.Response.StatusCode == 403)">
			
			<send-request ignore-error="true" timeout="20" response-variable-name="snowAuth" mode="new">
				<set-url>https://#{keyVaultHost}#/secrets/hmi-servicenow-auth?api-version=7.0</set-url>
				<set-method>GET</set-method>
				<authentication-managed-identity resource="https://vault.azure.net" />
			</send-request>
			<send-request ignore-error="false" timeout="20" response-variable-name="serviceNow" mode="new">
				<set-url>https://#{snowHost}#/api/now/table/incident?sysparm_fields=number</set-url>
				<set-method>POST</set-method>
				<set-header name="Authorization" exists-action="override">
					<value>
						@("Basic " + ((IResponse)context.Variables["snowAuth"]).Body.As
						<JObject>()["value"].ToString())
					</value>
				</set-header>
				<set-body>@{
					return new JObject(
					new JProperty("assignment_group", "56b756774fbd368057db0b318110c7bd"),
					new JProperty("caller_id", "1475a0491b743414f0dc85e4464bcb7a"),
					new JProperty("category", "Data Issue"),
					new JProperty("contact_type", "Alert"),
					new JProperty("description", "HMI - Get Sitting Patterns: " + context.Request.Headers.GetValueOrDefault("transactionIdHMCTS","")),
					new JProperty("impact", "2"),
					new JProperty("service_offering", "138e0c541bc5bc507bdaddf0b24bcb2a"),
					new JProperty("short_description", "HMI - API Gateway Error - Authorization Issue"),
					new JProperty("subcategory", "HMI - Backend Service Failure"),
					new JProperty("u_role_type", "c319bc4bdb41834074abffa9bf96199c"),
					new JProperty("urgency", "3")
					).ToString();
					}</set-body>
			</send-request>
			<return-response>
				<set-status code="502" />
				<set-header name="Content-Type">
					<value>application/json</value>
				</set-header>
				<set-body>@{
					return new JObject(
					new JProperty("message", "Successfully authorized by HMI, however target system failed to authorize. Please try again.")
					).ToString();
					}
				</set-body>
			</return-response>
		</when>
		<when condition="@(context.Response.StatusCode == 500)">
			<send-request ignore-error="true" timeout="20" response-variable-name="snowAuth" mode="new">
				<set-url>https://#{keyVaultHost}#/secrets/hmi-servicenow-auth?api-version=7.0</set-url>
				<set-method>GET</set-method>
				<authentication-managed-identity resource="https://vault.azure.net" />
			</send-request>
			<send-request ignore-error="false" timeout="20" response-variable-name="serviceNow" mode="new">
				<set-url>https://#{snowHost}#/api/now/table/incident?sysparm_fields=number</set-url>
				<set-method>POST</set-method>
				<set-header name="Authorization" exists-action="override">
					<value>
						@("Basic " + ((IResponse)context.Variables["snowAuth"]).Body.As
						<JObject>()["value"].ToString())
					</value>
				</set-header>
				<set-body>@{
					return new JObject(
					new JProperty("assignment_group", "56b756774fbd368057db0b318110c7bd"),
					new JProperty("caller_id", "1475a0491b743414f0dc85e4464bcb7a"),
					new JProperty("category", "Data Issue"),
					new JProperty("contact_type", "Alert"),
					new JProperty("description", "HMI - Get Sitting Patterns: " + context.Request.Headers.GetValueOrDefault("transactionIdHMCTS","")),
					new JProperty("impact", "2"),
					new JProperty("service_offering", "138e0c541bc5bc507bdaddf0b24bcb2a"),
					new JProperty("short_description", "HMI - API Gateway Error"),
					new JProperty("subcategory", "HMI - Backend Service Failure"),
					new JProperty("u_role_type", "c319bc4bdb41834074abffa9bf96199c"),
					new JProperty("urgency", "3")
					).ToString();
					}</set-body>
			</send-request>
		</when>
	</choose>
	</outbound>
    <on-error>
        <base />
    </on-error>
</policies>