<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <set-variable name="req" value="@(context.Request.Body.As<JObject>())" />
        <choose>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Case Title") || ((JObject)context.Variables["req"]).GetValue("Case Title").Type != JTokenType.String)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Case Title'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Case Id") || ((JObject)context.Variables["req"]).GetValue("Case Id").Type != JTokenType.String)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Case Id'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Venue") || ((JObject)context.Variables["req"]).GetValue("Venue").Type != JTokenType.String)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Venue'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Jurisdiction") || ((JObject)context.Variables["req"]).GetValue("Jurisdiction").Type != JTokenType.String)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Jurisdiction'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Service") || ((JObject)context.Variables["req"]).GetValue("Service").Type != JTokenType.String)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Service'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Case Type") || ((JObject)context.Variables["req"]).GetValue("Case Type").Type != JTokenType.String)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Case Type'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Hearing Type") || ((JObject)context.Variables["req"]).GetValue("Hearing Type").Type != JTokenType.String)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Hearing Type'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Hearing channel") || ((JObject)context.Variables["req"]).GetValue("Hearing channel").Type != JTokenType.String)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Hearing channel'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Private Hearing") || ((JObject)context.Variables["req"]).GetValue("Private Hearing").Type != JTokenType.Boolean)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Private Hearing'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(!((JObject)context.Variables["req"]).ContainsKey("Allocated Listing Team") || ((JObject)context.Variables["req"]).GetValue("Allocated Listing Team").Type != JTokenType.String)">
                <return-response>
                    <set-status code="400" reason="Malformed request." />
                    <set-body>@{
                        return new JObject(
                        new JProperty("Error", "400"),
                        new JProperty("Reason", "Malformed request. Missing property: 'Allocated Listing Team'")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>