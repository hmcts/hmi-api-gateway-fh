<policies>
	<inbound>
		<base />
		<choose>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "EMULATOR")">
                <rewrite-uri template="/create-hearing" copy-unmatched-params="true" />
                <set-backend-service base-url="http://#{emulatorHost}#/hearings/" />
            </when>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "CFT")">
				<rewrite-uri template="/create-hearing" copy-unmatched-params="true" />
				<set-backend-service base-url="http://#{emulatorHost}#/hearings/" />
			</when>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "SNL")">
				<send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
                    <set-url>#{sAndLOauthUrl}#</set-url>
                    <set-method>POST</set-method>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/x-www-form-urlencoded</value>
                    </set-header>
                    <set-body>@{
                        return "username=#{sAndLAuthClient}#&password=#{sAndLAuthSecret}#&grant_type=password_credentials";}</set-body>
                </send-request>
                <set-header name="Authorization" exists-action="override">
                    <value>@("Bearer " + (String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["idToken"])</value>
                </set-header>
				<rewrite-uri template="/" copy-unmatched-params="true" />
				<set-header name="Content-Type" exists-action="override">
                    <value>application/json; charset=utf-8</value>
                </set-header>
                <set-header name="Request-Type" exists-action="override">
                    <value>text</value>
                </set-header>
                <set-header name="Subscription-Key" exists-action="override">
                    <value>@(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key","unknown"))</value>
                </set-header>
                <!--  Don't expose APIM subscription key to the backend. -->
                <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
				<set-backend-service base-url="https://#{sAndLHost}#/casehqapi/rest/hmcts/resources/hearings" />
			</when>
			<!--Added temporarily untill McGirr fixes the DS type on their side-->
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "S&L")">
				<send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
					<set-url>#{sAndLOauthUrl}#</set-url>
					<set-method>POST</set-method>
					<set-header name="Content-Type" exists-action="override">
						<value>application/x-www-form-urlencoded</value>
					</set-header>
					<set-body>@{
						return "username=#{sAndLAuthClient}#&password=#{sAndLAuthSecret}#&grant_type=password_credentials";}</set-body>
				</send-request>
				<set-header name="Authorization" exists-action="override">
					<value>@("Bearer " + (String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["idToken"])</value>
				</set-header>
				<rewrite-uri template="/" copy-unmatched-params="true" />
				<set-header name="Content-Type" exists-action="override">
					<value>application/json; charset=utf-8</value>
				</set-header>
				<set-header name="Request-Type" exists-action="override">
					<value>text</value>
				</set-header>
				<set-header name="Subscription-Key" exists-action="override">
					<value>@(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key","unknown"))</value>
				</set-header>
						<!--  Don't expose APIM subscription key to the backend. -->
				<set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
				<set-backend-service base-url="https://#{sAndLHost}#/casehqapi/rest/hmcts/resources/hearings" />
			</when>
			<!--Added temporarily untill McGirr fixes the DS type on their side-->
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "CRIME")">
				<rewrite-uri template="/create-hearing" copy-unmatched-params="true" />
				<set-backend-service base-url="http://#{emulatorHost}#/hearings/" />
			</when>
			<when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "MOCK")">
					<return-response>
	                    <set-status code="202" />
	                    <set-header name="Content-Type">
	    					<value>application/json</value>
						</set-header>
						<set-body>@{
		               return new JObject(
		                   new JProperty("response code", 202),
		                   new JProperty("description", "The request was received successfully.")
		               ).ToString();
		               }
		       		</set-body>
		        </return-response>
		    </when>
		</choose>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>