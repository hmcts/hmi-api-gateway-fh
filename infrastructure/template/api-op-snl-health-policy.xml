<policies>
    <inbound>
        <base />
        <send-request ignore-error="false" timeout="20" response-variable-name="snlClientResponse" mode="new">
            <set-url>https://#{keyVaultHost}#/secrets/hmi-snl-client-nonprod-id/?api-version=7.0</set-url>
            <set-method>GET</set-method>
            <authentication-managed-identity resource="https://vault.azure.net" />
        </send-request>
        <set-variable name="snlClient" value="@{
													  var secret = ((IResponse)context.Variables["snlClientResponse"]).Body.As<JObject>();
													  return secret["value"].ToString();
												}" />
        <send-request ignore-error="false" timeout="20" response-variable-name="snlSecretResponse" mode="new">
            <set-url>https://#{keyVaultHost}#/secrets/hmi-snl-client-nonprod-pwd/?api-version=7.0</set-url>
            <set-method>GET</set-method>
            <authentication-managed-identity resource="https://vault.azure.net" />
        </send-request>
        <set-variable name="snlSecret" value="@{
													  var secret = ((IResponse)context.Variables["snlSecretResponse"]).Body.As<JObject>();
													  return secret["value"].ToString();
												}" />
        <send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
            <set-url>#{sAndLOauthUrl}#</set-url>
            <set-method>POST</set-method>
            <set-header name="Content-Type" exists-action="override">
                <value>application/x-www-form-urlencoded</value>
            </set-header>
            <set-body>@{
                return "username=" + (string)context.Variables["snlClient"] + "&password=" + (string)context.Variables["snlSecret"] + "&grant_type=password_credentials";}</set-body>
        </send-request>
        <set-header name="Authorization" exists-action="override">
                <value>@("Bearer " + (String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["access_token"])</value>
        </set-header>
        <set-header name="Content-Type" exists-action="override">
            <value>application/json; charset=utf-8</value>
        </set-header>
        <set-header name="Request-Type" exists-action="override">
            <value>text</value>
        </set-header>
        <set-header name="transactionIdHMCTS" exists-action="override">
             <value>@{
                var guidBinary = new byte[16];
                Array.Copy(Guid.NewGuid().ToByteArray(), 0, guidBinary, 0, 10);
                long time = DateTime.Now.Ticks;
                byte[] bytes = new byte[6];
                unchecked
                {
                       bytes[5] = (byte)(time >> 40);
                       bytes[4] = (byte)(time >> 32);
                       bytes[3] = (byte)(time >> 24);
                       bytes[2] = (byte)(time >> 16);
                       bytes[1] = (byte)(time >> 8);
                       bytes[0] = (byte)(time);
                }
                Array.Copy(bytes, 0, guidBinary, 10, 6);
                return new Guid(guidBinary).ToString();
            }</value>
        </set-header>
        <set-header name="Destination-System" exists-action="override">
            <value>SNL</value>
        </set-header>
        <set-header name="Subscription-Key" exists-action="override">
            <value>@(context.Request.Headers.GetValueOrDefault("Ocp-Apim-Subscription-Key","unknown"))</value>
        </set-header>
        <!--  Don't expose APIM subscription key to the backend. -->
        <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
        <rewrite-uri template="/" copy-unmatched-params="true" />
        <set-backend-service base-url="https://#{sAndLHost}#/rest/hmcts/resources/healthCheck" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>