<policies>
    <inbound>
        <base />
        <choose>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "VH")">
                <cache-lookup-value key="vhAuth" variable-name="vhAuthToken" />
                <choose>
                    <when condition="@(context.Variables.GetValueOrDefault("vhAuthToken","") == "")">
                        <send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
                            <set-url>https://login.microsoftonline.com/fb6e0e22-0da3-4c35-972a-9d61eb256508/oauth2/token</set-url>
                            <set-method>POST</set-method>
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/x-www-form-urlencoded</value>
                            </set-header>
                            <set-body>@{
                                return "client_id=#{vhAuthClient}#&resource=#{vhAuthResource}#&client_secret=#{vhAuthSecret}#&grant_type=client_credentials";
                            }</set-body>
                        </send-request>
                        <cache-store-value key="vhAuth" value="@("Bearer " + (String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["access_token"])" duration="2700" />
                    </when>
                </choose>
                <set-header name="Authorization" exists-action="override">
                    <value>@((String)context.Variables["vhAuthToken"])</value>
                </set-header>
                <rewrite-uri template="/{hearingId}" copy-unmatched-params="true" />
                <set-backend-service base-url="#{vhHost}#/hearings" />
            </when>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "MOCK")">
                <set-backend-service base-url="https://vh-bookings-api-dev.azurewebsites.net/hearings/update" />
                <mock-response status-code="200" content-type="application/json" />
            </when>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Destination-System","") == "EMULATOR")">
                <rewrite-uri template="/{hearingId}" copy-unmatched-params="true" />
                <set-backend-service base-url="http://#{emulatorHost}#/hearings/update-video-hearing/" />
            </when>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
         <choose>
            <when condition="@(context.Response.StatusCode == 401)">
                <cache-remove-value key="vhAuth" />
                <return-response>
						<set-status code="502" />
						<set-header name="Content-Type">
							<value>application/json</value>
						</set-header>
						<set-body>@{
						return new JObject(
							new JProperty("message", "Successfully autheticated by HMI, however target system failed to autheticate. Please try again.")
						    ).ToString();
						}
					</set-body>
				</return-response>
            </when>
             <when condition="@(context.Response.StatusCode == 403)">
                <cache-remove-value key="vhAuth" />
                <return-response>
						<set-status code="502" />
						<set-header name="Content-Type">
							<value>application/json</value>
						</set-header>
						<set-body>@{
						return new JObject(
							new JProperty("message", "Successfully authorized by HMI, however target system failed to authorize. Please try again.")
						    ).ToString();
						}
					</set-body>
				</return-response>
            </when>
            <when condition="@(context.Response.StatusCode == 500)">
                <send-request ignore-error="true" timeout="20" response-variable-name="snowAuth" mode="new">
					<set-url>https://hmi-shared-kv-dev.vault.azure.net/secrets/hmi-servicenow-auth?api-version=7.0</set-url>
					<set-method>GET</set-method>
					<authentication-managed-identity resource="https://vault.azure.net" />
				</send-request>
				<send-request ignore-error="false" timeout="20" response-variable-name="serviceNow" mode="new">
					<set-url>https://mojcpppreprod.service-now.com/api/now/table/incident?sysparm_fields=number</set-url>
					<set-method>POST</set-method>
					<set-header name="Authorization" exists-action="override">
						<value>@("Basic " + ((IResponse)context.Variables["snowAuth"]).Body.As<JObject>()["value"].ToString())</value>
					</set-header>
					<set-body>@{
						return new JObject(
							new JProperty("assignment_group", "56b756774fbd368057db0b318110c7bd"),
							new JProperty("caller_id", "1475a0491b743414f0dc85e4464bcb7a"),
							new JProperty("category", "Data Issue"),
							new JProperty("contact_type", "Alert"),
							new JProperty("description", "HMI - Testing Error Handling"),
							new JProperty("impact", "2"),
							new JProperty("service_offering", "138e0c541bc5bc507bdaddf0b24bcb2a"),
							new JProperty("short_description", "HMI - Testing Error Handling"),
							new JProperty("subcategory", "HMI - Backend Service Failure"),
							new JProperty("u_role_type", "c319bc4bdb41834074abffa9bf96199c"),
							new JProperty("urgency", "3")
							).ToString();    
					}</set-body>
				</send-request>
				<return-response>
                    <set-status code="502" />
                    <set-header name="Content-Type">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("message", "Problem occured with Backend Service. Please try again.")
                            ).ToString();
                        }
                    </set-body>
                </return-response>
            </when>
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>