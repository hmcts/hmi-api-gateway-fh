parameters:
  - name: dependsOn
    type: object
    default: ''

  - name: displayName
    type: string
 
  - name: subscription
    type: string

  - name: environment
    type: string

  - name: logicApps
    type: object

jobs:
- job: CreateDtuLogicApp
  dependsOn:
  - ${{ if parameters.dependsOn }}:
    - ${{ parameters.dependsOn }}
  displayName: ${{ parameters.displayName }}
  pool:
    vmImage: 'windows-latest'
  steps:
  - template: ../steps/replace-token.yaml
    parameters:
      path: '**/parameters-*.json'
      environment: ${{ parameters.environment }}
  - task: AzureCLI@2
    displayName: Create DTU Logic App
    name: createLogicApp
    inputs:
      azureSubscription: ${{ parameters.subscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "Creating DTU Logic Application - ROTA"
        az deployment group create --resource-group $resourceGroupName --template-file "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\rota\hmi-la-rota-file-pub.json" --parameters "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\rota\parameters-filepub-$(environment).json"
        az deployment group create --resource-group $resourceGroupName --template-file "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\rota\hmi-la-rota-purge-session.json" --parameters "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\rota\parameters-purge-session-$(environment).json"
        az deployment group create --resource-group $resourceGroupName --template-file "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\rota\hmi-la-rota-session-enricher.json" --parameters "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\rota\parameters-session-enricher-$(environment).json"
        az deployment group create --resource-group $resourceGroupName --template-file "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\rota\hmi-la-rota-session-publisher.json" --parameters "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\rota\parameters-session-publisher-$(environment).json"
        echo "Creating DTU Logic Application - Sitting Patterns"
        az deployment group create --resource-group $resourceGroupName --template-file "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\sitting-pattern\hmi-la-sittingpatteren-publisher-la.json" --parameters "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\sitting-pattern\sitting-loader-param-$(environment).json"
        az deployment group create --resource-group $resourceGroupName --template-file "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\sitting-pattern\hmi-la-sittingpatteren-retriever-la.json" --parameters "$(System.DefaultWorkingDirectory)\infrastructure\logic-app\sitting-pattern\sitting-retriever-param-$(environment).json"
        echo "Creating DTU Logic Applications is complete"
  - task: AzureCLI@2
    displayName: Give Logic App Access to Key Vault
    name: kv_access
    inputs:
      azureSubscription: ${{ parameters.subscription }}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $env="$(environment)"
        $workflowNames=@("hmi-la-dturota-$env", "hmi-la-listing-data-export-$env", "hmi-la-sittingpattern-publisher-$env", "hmi-la-sittingpattern-retriever-$env")
        $resourceGroupName="hmi-sharedinfra-$env-rg"
        $kv_name="hmi-shared-kv-$env"
        az config set extension.use_dynamic_install=yes_without_prompt
        foreach ($workflowName in $workflowNames){
            $workflowIdentity = az logic workflow list --resource-group "$resourceGroupName" --query "[? name=='$workflowName'].identity" --only-show-errors | ConvertFrom-Json
            if ($null -eq  $workflowIdentity.principalId -or "" -eq $workflowIdentity.principalId ){
                Write-Host "No Identities found in $workflowName."
            } else {
                Write-Host "$workflowName identities."
                Write-Host $( $workflowIdentity | ConvertTo-Json)
                Write-Host "Give Permissions to $kv_name"
                $sp_id=$workflowIdentity.principalId
                az keyvault set-policy --name $kv_name --object-id $sp_id --secret-permissions get list
            }
        }